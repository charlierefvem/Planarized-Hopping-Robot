################## Double Pendulum 3.0 ##################

################### Imported Librarys ###################
using DifferentialEquations
using LinearAlgebra
using Plots
using StaticArrays

####################### Functions #######################
### ODE Solver ###
function ode_fn!(du,u,p,t)
     œÑ =  [0 0]'
     M = [p.L·µ¶^2*p.m‚ÇÅ + 2*p.L·µ¶*(p.L‚Çê-p.L‚ÇÇ)*p.m‚ÇÅ*cos(u[2]) + (p.L‚ÇÇ-p.L·µ¶)^2*p.m‚ÇÇ + (p.L‚ÇÇ-p.L‚Çê)^2*p.m‚ÇÅ        p.L·µ¶^2*p.m‚ÇÅ + (p.L‚ÇÇ-p.L·µ¶)^2*p.m‚ÇÇ + p.L·µ¶*(p.L‚Çê-p.L‚ÇÇ)*p.m‚ÇÅ*cos(u[2]);
          p.L·µ¶^2*p.m‚ÇÅ +   p.L·µ¶*(p.L‚Çê-p.L‚ÇÇ)*p.m‚ÇÅ*cos(u[2]) + (p.L‚ÇÇ-p.L·µ¶)^2*p.m‚ÇÇ                             p.L·µ¶^2*p.m‚ÇÅ + (p.L‚ÇÇ-p.L·µ¶)^2*p.m‚ÇÇ];
    
     V = [p.c‚ÇÅ*u[5] - u[6]*(2*u[5] + u[6])*p.L·µ¶*p.m‚ÇÅ*(p.L‚Çê-p.L‚ÇÇ)*sin(u[2]) - p.m‚ÇÅ*p.g*(p.L·µ¶*sin(u[1] + u[2]) + (p.L‚Çê-p.L‚ÇÇ)*sin(u[1])) - p.m‚ÇÇ*p.g*(p.L·µ¶-p.L‚ÇÇ)*sin(u[1] + u[2]);
          p.c‚ÇÇ*u[6] + u[5]^2*p.m‚ÇÅ*p.L·µ¶*(p.L‚Çê-p.L‚ÇÇ)*sin(u[2])               - p.m‚ÇÅ*p.g*p.L·µ¶*sin(u[1] + u[2])                           - p.m‚ÇÇ*p.g*(p.L·µ¶-p.L‚ÇÇ)*sin(u[1] + u[2])]
                                                                            
     C = [1 0;
          0 1;
          -p.L·µ¶*cos(u[1]+u[2]) - p.L‚Çê*cos(u[1])  -p.L·µ¶*cos(u[1]+u[2]);
          -p.L·µ¶*sin(u[1]+u[2]) - p.L‚Çê*sin(u[1])  -p.L·µ¶*sin(u[1]+u[2])]
   
     D = [0
          0
          p.L·µ¶*(u[5]+u[6])^2*sin(u[1]+u[2]) + p.L‚Çê*u[5]^2*sin(u[1]);
         -p.L·µ¶*(u[5]+u[6])^2*cos(u[1]+u[2]) - p.L‚Çê*u[5]^2*cos(u[1])]

     qÃà = C*(M\(œÑ-V)) + D

     du[1:4] = u[5:8]
     du[5:8] = qÃà
 
     SA[du]
end

### Convert to Cartesian ###
function X_Y(u,p)

     L‚Çê,L·µ¶,L‚ÇÅ,L‚ÇÇ = p
     x‚Çí = u[3,:]
     y‚Çí = u[4,:]
     u‚ÇÅ = u[1,:]
     u‚ÇÇ = u[2,:] + u[1,:]

     x = zeros(5,n)
     x[1,:] = x‚Çí
     x[2,:] = x[1,:] + L‚ÇÅ*sin.(u‚ÇÅ)
     x[3,:] = x[1,:] + L‚Çê*sin.(u‚ÇÅ)
     x[4,:] = x[3,:] + L‚ÇÇ*sin.(u‚ÇÇ)
     x[5,:] = x[3,:] + L·µ¶*sin.(u‚ÇÇ)

     y = zeros(5,n)
     y[1,:] = y‚Çí
     y[2,:] = y[1,:] + -L‚ÇÅ*cos.(u‚ÇÅ)
     y[3,:] = y[1,:] + -L‚Çê*cos.(u‚ÇÅ)
     y[4,:] = y[3,:] + -L‚ÇÇ*cos.(u‚ÇÇ)
     y[5,:] = y[3,:] + -L·µ¶*cos.(u‚ÇÇ)
     x,y
end
#=function X_Y(u,p)

     L‚Çê,L·µ¶,L‚ÇÅ,L‚ÇÇ = p
     x‚Çí = 0
     y‚Çí = 0
     u‚ÇÅ = u[1,:]
     u‚ÇÇ = u[2,:] + u[1,:]

     x = zeros(5,n)
     x[5,:] = x‚Çí * ones(1,n)
     x[4,:] = x[5,:] - (L·µ¶-L‚ÇÇ)*sin.(u‚ÇÇ)
     x[3,:] = x[5,:] -      L·µ¶*sin.(u‚ÇÇ)
     x[2,:] = x[3,:] - (L‚Çê-L‚ÇÅ)*sin.(u‚ÇÅ)
     x[1,:] = x[3,:] -      L‚ÇÅ*sin.(u‚ÇÅ)

     y = zeros(5,n)
     y[1,:] = y‚Çí * ones(1,n)
     y[4,:] = y[5,:] + (L·µ¶-L‚ÇÇ)*cos.(u‚ÇÇ)
     y[3,:] = y[5,:] +      L·µ¶*cos.(u‚ÇÇ)
     y[2,:] = y[3,:] + (L‚Çê-L‚ÇÅ)*cos.(u‚ÇÅ)
     y[1,:] = y[3,:] +      L‚ÇÅ*cos.(u‚ÇÅ)
     x,y
end=#


##################### Start of Code #####################
### Initial Conditions ###
x‚ÇÄ = [0, .4, -1.8, 8, 0, 0, 0, 0];
m‚ÇÅ,m‚ÇÇ,L‚Çê,L·µ¶,L‚ÇÅ,L‚ÇÇ,c‚ÇÅ,c‚ÇÇ,c‚Çì,cü•∞,g = (8,16,4,5,3,3,20,20,1,2, 1.81) 
p = (m‚ÇÅ=m‚ÇÅ,m‚ÇÇ=m‚ÇÇ,L‚Çê=L‚Çê,L·µ¶=L·µ¶,L‚ÇÅ=L‚ÇÅ,L‚ÇÇ=L‚ÇÇ,c‚ÇÅ=c‚ÇÅ,c‚ÇÇ=c‚ÇÇ,c‚Çì=c‚Çì,cü•∞=cü•∞, g=g)

####### ODE Solver #######
tspan = (0.0, 15.0);
prob = ODEProblem(ode_fn!,x‚ÇÄ,tspan,p);
sol = solve(prob,AutoTsit5(Rosenbrock23()),dt=1);

##### Interpret Data #####
n =  length(sol)
dim = length(sol.u[1])
u = zeros(dim,n)
for i in 1:n
    u[:,i] = sol.u[i,1][1:dim]
end

p = L‚Çê,L·µ¶,L‚ÇÅ,L‚ÇÇ
x,y = X_Y(u,p)

############### Phase Plot ###############
##### X V.S Y #####
plt = plot(x[1,:], y[1,:], lc=:black, lw=2)
plot!(x[3,:], y[3,:], lc=:red, lw=2)
plot!(x[5,:], y[5,:], lc=:blue, lw=2)
plot!([x[1,1]],[y[1,1]],markercolors = :red, shape = :circle, markersize = 3)
plot!([x[3,1]],[y[3,1]],markercolors = :red, shape = :circle, markersize = 3)
plot!([x[5,1]],[y[5,1]],markercolors = :red, shape = :circle, markersize = 3)
title!("Y and X Position of Orgin")
xlabel!("x")
ylabel!("y")
display(plt)

##### Œ∏‚ÇÅ V.S Œ∏Ãá‚ÇÅ #####
idx = Int(dim/2+1)
plt = plot(u[1,:], u[idx,:], lc=:black, lw=2)
plot!([u[1,1]],[u[idx,1]],markercolors = :red, shape = :circle, markersize = 3)
title!("Phase Plot Œ∏‚ÇÅ V.S Œ∏Ãá‚ÇÅ")
xlabel!("Œ∏‚ÇÅ")
ylabel!("Œ∏Ãá‚ÇÅ")
display(plt)

##### Œ∏‚ÇÉ V.S Œ∏Ãá‚ÇÉ #####
idx = Int(dim/2+2)
plt = plot(u[2,:], u[idx,:], lc=:black, lw=2)
plot!([u[2,1]],[u[idx,1]],markercolors = :red, shape = :circle, markersize = 3)
title!("Phase Plot Œ∏‚ÇÉ V.S Œ∏Ãá‚ÇÉ")
xlabel!("Œ∏‚ÇÅ")
ylabel!("Œ∏Ãá‚ÇÉ")
display(plt)

####### Create GIF #######
n =  length(sol)
@gif for i ‚àà 1:n
     hi = sol.u[i][4] - L‚Çê*cos(sol.u[i][1]) - L·µ¶*cos(sol.u[i][1] + sol.u[i][2])
     plot(x[:,i],y[:,i],ylim = [-10,10],xlim=[-10,10],xlabel="X Position", ylabel="Y Position", 
        markercolors = [:black, :red, :black, :red, :blue], shape = [:none,:circle, :cross, :circle, :circle],
        markersize = [3,8,6,8,16], linewidth = 4, title = "Single Leg In Stance", aspect_ratio=:equal)
end every 1
