
CAN_Node_Nucleo_476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006098  08006098  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060a0  080060a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060a0  080060a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060a4  080060a4  000160a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080060a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  20000070  08006118  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  08006118  00020734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170ce  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b1a  00000000  00000000  0003716e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  00039c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003b030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283e4  00000000  00000000  0003c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d70  00000000  00000000  000646b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f930b  00000000  00000000  0007a424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017372f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000581c  00000000  00000000  00173780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f94 	.word	0x08005f94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005f94 	.word	0x08005f94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b092      	sub	sp, #72	; 0x48
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fd81 	bl	8001080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f867 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 fa2b 	bl	80009dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f9cb 	bl	8000920 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800058a:	f000 f8c3 	bl	8000714 <MX_CAN1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800058e:	f000 f9f7 	bl	8000980 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000592:	f000 f987 	bl	80008a4 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000596:	f000 f91f 	bl	80007d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  char msg_buf[64];
  uint16_t msg_len = sprintf(msg_buf,"Bus Configured\r\n");
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	4920      	ldr	r1, [pc, #128]	; (8000620 <main+0xac>)
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 f88a 	bl	80056b8 <siprintf>
 80005a4:	4603      	mov	r3, r0
 80005a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  HAL_UART_Transmit(&huart2,(uint8_t*) msg_buf, msg_len, HAL_MAX_DELAY);
 80005aa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80005ae:	1d39      	adds	r1, r7, #4
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	481b      	ldr	r0, [pc, #108]	; (8000624 <main+0xb0>)
 80005b6:	f004 f89d 	bl	80046f4 <HAL_UART_Transmit>

//      msg_len = sprintf(msg_buf,"Edge: %lu\r\n", edge_stamp);
//      HAL_UART_Transmit(&huart2,(uint8_t*) msg_buf, msg_len, HAL_MAX_DELAY);


      if (msg_recvd)
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <main+0xb4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0fa      	beq.n	80005ba <main+0x46>
      {
          CAN_tx_pkt.values.position = position;
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <main+0xb8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a19      	ldr	r2, [pc, #100]	; (8000630 <main+0xbc>)
 80005ca:	6013      	str	r3, [r2, #0]
          CAN_tx_pkt.values.velocity = delta;
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <main+0xc0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	b21a      	sxth	r2, r3
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <main+0xbc>)
 80005d4:	809a      	strh	r2, [r3, #4]

          HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_hdr, CAN_tx_pkt.data, &CAN_tx_mailbox);
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <main+0xc4>)
 80005d8:	4a15      	ldr	r2, [pc, #84]	; (8000630 <main+0xbc>)
 80005da:	4918      	ldr	r1, [pc, #96]	; (800063c <main+0xc8>)
 80005dc:	4818      	ldr	r0, [pc, #96]	; (8000640 <main+0xcc>)
 80005de:	f000 fff8 	bl	80015d2 <HAL_CAN_AddTxMessage>

          msg_count++;
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <main+0xd0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	4a16      	ldr	r2, [pc, #88]	; (8000644 <main+0xd0>)
 80005ea:	6013      	str	r3, [r2, #0]
          msg_recvd = false;
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <main+0xb4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]

          // Do something when a message is received.
          msg_len = sprintf(msg_buf,"MSG #%lu recvd: val=%u\r\n", msg_count, CAN_rx_pkt.values.cmd);
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <main+0xd0>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <main+0xd4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4912      	ldr	r1, [pc, #72]	; (800064c <main+0xd8>)
 8000604:	f005 f858 	bl	80056b8 <siprintf>
 8000608:	4603      	mov	r3, r0
 800060a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
          HAL_UART_Transmit(&huart2,(uint8_t*) msg_buf, msg_len, HAL_MAX_DELAY);
 800060e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000612:	1d39      	adds	r1, r7, #4
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <main+0xb0>)
 800061a:	f004 f86b 	bl	80046f4 <HAL_UART_Transmit>
      if (msg_recvd)
 800061e:	e7cc      	b.n	80005ba <main+0x46>
 8000620:	08005fac 	.word	0x08005fac
 8000624:	2000014c 	.word	0x2000014c
 8000628:	200006e0 	.word	0x200006e0
 800062c:	20000710 	.word	0x20000710
 8000630:	20000704 	.word	0x20000704
 8000634:	20000718 	.word	0x20000718
 8000638:	2000070c 	.word	0x2000070c
 800063c:	08006004 	.word	0x08006004
 8000640:	2000008c 	.word	0x2000008c
 8000644:	200006dc 	.word	0x200006dc
 8000648:	20000700 	.word	0x20000700
 800064c:	08005fc0 	.word	0x08005fc0

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	; 0x58
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2244      	movs	r2, #68	; 0x44
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 f822 	bl	80056a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000672:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000676:	f002 f81d 	bl	80026b4 <HAL_PWREx_ControlVoltageScaling>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000680:	f000 fa88 	bl	8000b94 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000684:	f001 fff8 	bl	8002678 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <SystemClock_Config+0xc0>)
 800068a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800068e:	4a20      	ldr	r2, [pc, #128]	; (8000710 <SystemClock_Config+0xc0>)
 8000690:	f023 0318 	bic.w	r3, r3, #24
 8000694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000698:	2314      	movs	r3, #20
 800069a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a8:	2360      	movs	r3, #96	; 0x60
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b0:	2301      	movs	r3, #1
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006b8:	2328      	movs	r3, #40	; 0x28
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006bc:	2307      	movs	r3, #7
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 f857 	bl	8002780 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006d8:	f000 fa5c 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2303      	movs	r3, #3
 80006e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	2104      	movs	r1, #4
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fc1f 	bl	8002f38 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000700:	f000 fa48 	bl	8000b94 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000704:	f003 f926 	bl	8003954 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000708:	bf00      	nop
 800070a:	3758      	adds	r7, #88	; 0x58
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40021000 	.word	0x40021000

08000714 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000714:	b5b0      	push	{r4, r5, r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800071a:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <MX_CAN1_Init+0xb8>)
 800071c:	4a2c      	ldr	r2, [pc, #176]	; (80007d0 <MX_CAN1_Init+0xbc>)
 800071e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000720:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <MX_CAN1_Init+0xb8>)
 8000722:	2204      	movs	r2, #4
 8000724:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000726:	4b29      	ldr	r3, [pc, #164]	; (80007cc <MX_CAN1_Init+0xb8>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800072c:	4b27      	ldr	r3, [pc, #156]	; (80007cc <MX_CAN1_Init+0xb8>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <MX_CAN1_Init+0xb8>)
 8000734:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000738:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <MX_CAN1_Init+0xb8>)
 800073c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000740:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_CAN1_Init+0xb8>)
 8000744:	2200      	movs	r2, #0
 8000746:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MX_CAN1_Init+0xb8>)
 800074a:	2200      	movs	r2, #0
 800074c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_CAN1_Init+0xb8>)
 8000750:	2200      	movs	r2, #0
 8000752:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_CAN1_Init+0xb8>)
 8000756:	2201      	movs	r2, #1
 8000758:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_CAN1_Init+0xb8>)
 800075c:	2200      	movs	r2, #0
 800075e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_CAN1_Init+0xb8>)
 8000762:	2200      	movs	r2, #0
 8000764:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000766:	4819      	ldr	r0, [pc, #100]	; (80007cc <MX_CAN1_Init+0xb8>)
 8000768:	f000 fd2a 	bl	80011c0 <HAL_CAN_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000772:	f000 fa0f 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  // Set filter 0 for LIST16 with the addresses [4 6 7 8] using fifo 0
  CAN_FilterTypeDef hfilt = {
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_CAN1_Init+0xc0>)
 8000778:	463c      	mov	r4, r7
 800077a:	461d      	mov	r5, r3
 800077c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000784:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000788:	e884 0003 	stmia.w	r4, {r0, r1}
          .FilterScale = CAN_FILTERSCALE_16BIT,
          .FilterActivation = CAN_FILTER_ENABLE,
          .SlaveStartFilterBank = 14
  };

  if(HAL_CAN_ConfigFilter(&hcan1, &hfilt) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	480e      	ldr	r0, [pc, #56]	; (80007cc <MX_CAN1_Init+0xb8>)
 8000792:	f000 fe10 	bl	80013b6 <HAL_CAN_ConfigFilter>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_CAN1_Init+0x8c>
  {
    Error_Handler();
 800079c:	f000 f9fa 	bl	8000b94 <Error_Handler>
  }

  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80007a0:	480a      	ldr	r0, [pc, #40]	; (80007cc <MX_CAN1_Init+0xb8>)
 80007a2:	f000 fed2 	bl	800154a <HAL_CAN_Start>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_CAN1_Init+0x9c>
  {
    Error_Handler();
 80007ac:	f000 f9f2 	bl	8000b94 <Error_Handler>
  }

  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80007b0:	2102      	movs	r1, #2
 80007b2:	4806      	ldr	r0, [pc, #24]	; (80007cc <MX_CAN1_Init+0xb8>)
 80007b4:	f001 f8ef 	bl	8001996 <HAL_CAN_ActivateNotification>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_CAN1_Init+0xae>
  {
    Error_Handler();
 80007be:	f000 f9e9 	bl	8000b94 <Error_Handler>
  }

  /* USER CODE END CAN1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	; 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bdb0      	pop	{r4, r5, r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	40006400 	.word	0x40006400
 80007d4:	08005fdc 	.word	0x08005fdc

080007d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	; 0x30
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2224      	movs	r2, #36	; 0x24
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 ff5e 	bl	80056a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <MX_TIM3_Init+0xc0>)
 80007f8:	4a28      	ldr	r2, [pc, #160]	; (800089c <MX_TIM3_Init+0xc4>)
 80007fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007fc:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_TIM3_Init+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <MX_TIM3_Init+0xc0>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <MX_TIM3_Init+0xc0>)
 800080a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800080e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_TIM3_Init+0xc0>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_TIM3_Init+0xc0>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800081c:	2303      	movs	r3, #3
 800081e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000824:	2301      	movs	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000834:	2301      	movs	r3, #1
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	4619      	mov	r1, r3
 8000846:	4814      	ldr	r0, [pc, #80]	; (8000898 <MX_TIM3_Init+0xc0>)
 8000848:	f003 fb2e 	bl	8003ea8 <HAL_TIM_Encoder_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000852:	f000 f99f 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	4619      	mov	r1, r3
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_TIM3_Init+0xc0>)
 8000864:	f003 fe52 	bl	800450c <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800086e:	f000 f991 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  last_count = TIM3->CNT;
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_TIM3_Init+0xc4>)
 8000874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_TIM3_Init+0xc8>)
 800087a:	801a      	strh	r2, [r3, #0]

  if (HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK)
 800087c:	213c      	movs	r1, #60	; 0x3c
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <MX_TIM3_Init+0xc0>)
 8000880:	f003 fbb8 	bl	8003ff4 <HAL_TIM_Encoder_Start>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800088a:	f000 f983 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE END TIM3_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	3730      	adds	r7, #48	; 0x30
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000b4 	.word	0x200000b4
 800089c:	40000400 	.word	0x40000400
 80008a0:	20000714 	.word	0x20000714

080008a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_TIM6_Init+0x74>)
 80008b6:	4a19      	ldr	r2, [pc, #100]	; (800091c <MX_TIM6_Init+0x78>)
 80008b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_TIM6_Init+0x74>)
 80008bc:	224f      	movs	r2, #79	; 0x4f
 80008be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_TIM6_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_TIM6_Init+0x74>)
 80008c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_TIM6_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008d4:	4810      	ldr	r0, [pc, #64]	; (8000918 <MX_TIM6_Init+0x74>)
 80008d6:	f003 fa1f 	bl	8003d18 <HAL_TIM_Base_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80008e0:	f000 f958 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <MX_TIM6_Init+0x74>)
 80008f2:	f003 fe0b 	bl	800450c <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80008fc:	f000 f94a 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK)
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_TIM6_Init+0x74>)
 8000902:	f003 fa61 	bl	8003dc8 <HAL_TIM_Base_Start_IT>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM6_Init+0x6c>
  {
    Error_Handler();
 800090c:	f000 f942 	bl	8000b94 <Error_Handler>
  }

  /* USER CODE END TIM6_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000100 	.word	0x20000100
 800091c:	40001000 	.word	0x40001000

08000920 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USART2_UART_Init+0x58>)
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <MX_USART2_UART_Init+0x5c>)
 8000928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_USART2_UART_Init+0x58>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART2_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_USART2_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USART2_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART2_UART_Init+0x58>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USART2_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART2_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USART2_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART2_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USART2_UART_Init+0x58>)
 8000964:	f003 fe78 	bl	8004658 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 f911 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000014c 	.word	0x2000014c
 800097c:	40004400 	.word	0x40004400

08000980 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800098a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2206      	movs	r2, #6
 8000990:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	2202      	movs	r2, #2
 8000996:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	2202      	movs	r2, #2
 800099c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	f001 fd10 	bl	80023e8 <HAL_PCD_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 f8e1 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200001d0 	.word	0x200001d0

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a2a      	ldr	r2, [pc, #168]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a24      	ldr	r2, [pc, #144]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a1e      	ldr	r2, [pc, #120]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_GPIO_Init+0xc4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2120      	movs	r1, #32
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f001 fcad 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a64:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <MX_GPIO_Init+0xc8>)
 8000a76:	f001 faf5 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a7a:	2320      	movs	r3, #32
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f001 fae6 	bl	8002064 <HAL_GPIO_Init>

}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	; 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	48000800 	.word	0x48000800

08000aa8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hCAN)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
//    HAL_CAN_GetRxMessage(hCAN, CAN_FILTER_FIFO0, &CAN_rx_hdr, CAN_rx_data);
    HAL_CAN_GetRxMessage(hCAN, CAN_FILTER_FIFO0, &CAN_rx_hdr, CAN_rx_pkt.data);
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000ab2:	4a15      	ldr	r2, [pc, #84]	; (8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 fe5b 	bl	8001772 <HAL_CAN_GetRxMessage>

    switch (CAN_rx_pkt.values.cmd)
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b07      	cmp	r3, #7
 8000ac8:	dc08      	bgt.n	8000adc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	da14      	bge.n	8000af8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	dc02      	bgt.n	8000ad8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	dc10      	bgt.n	8000af8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
 8000ad6:	e001      	b.n	8000adc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
 8000ad8:	2b05      	cmp	r3, #5
 8000ada:	d00a      	beq.n	8000af2 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
    {
    case CAN_CMD_ZERO:
        last_count = TIM8->CNT;
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000ae4:	801a      	strh	r2, [r3, #0]
        position = 0;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
        delta = 0;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
        // Intentional fall through
    case CAN_CMD_READ:
        msg_recvd = true;
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
    case CAN_CMD_NOP2:
    case CAN_CMD_NOP3:
    case CAN_CMD_NOP4:
    case CAN_CMD_NOP6:
    case CAN_CMD_NOP7:
        break;
 8000af8:	bf00      	nop
    }


}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000700 	.word	0x20000700
 8000b08:	200006e4 	.word	0x200006e4
 8000b0c:	40013400 	.word	0x40013400
 8000b10:	20000714 	.word	0x20000714
 8000b14:	20000710 	.word	0x20000710
 8000b18:	20000718 	.word	0x20000718
 8000b1c:	200006e0 	.word	0x200006e0

08000b20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    if(htim == &htim6)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d116      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
        uint16_t count = TIM3->CNT;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b34:	81fb      	strh	r3, [r7, #14]
        delta = (int16_t) (last_count - count);
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	89fb      	ldrh	r3, [r7, #14]
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	b21b      	sxth	r3, r3
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b48:	601a      	str	r2, [r3, #0]
        last_count = count;
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b4c:	89fb      	ldrh	r3, [r7, #14]
 8000b4e:	8013      	strh	r3, [r2, #0]
        position += delta;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b5c:	6013      	str	r3, [r2, #0]
    }
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000100 	.word	0x20000100
 8000b70:	40000400 	.word	0x40000400
 8000b74:	20000714 	.word	0x20000714
 8000b78:	20000718 	.word	0x20000718
 8000b7c:	20000710 	.word	0x20000710

08000b80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
//    if (htim == &htim5)
//        {
//            edge_stamp = htim5.Instance->CCR1;
//        }
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_MspInit+0x44>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_MspInit+0x44>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_MspInit+0x44>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x44>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000

08000be8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <HAL_CAN_MspInit+0x8c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d130      	bne.n	8000c6c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_CAN_MspInit+0x90>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	4a1a      	ldr	r2, [pc, #104]	; (8000c78 <HAL_CAN_MspInit+0x90>)
 8000c10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c14:	6593      	str	r3, [r2, #88]	; 0x58
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_CAN_MspInit+0x90>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_CAN_MspInit+0x90>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <HAL_CAN_MspInit+0x90>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_CAN_MspInit+0x90>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c4c:	2309      	movs	r3, #9
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4809      	ldr	r0, [pc, #36]	; (8000c7c <HAL_CAN_MspInit+0x94>)
 8000c58:	f001 fa04 	bl	8002064 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2014      	movs	r0, #20
 8000c62:	f001 f9c8 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c66:	2014      	movs	r0, #20
 8000c68:	f001 f9e1 	bl	800202e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40006400 	.word	0x40006400
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	48000400 	.word	0x48000400

08000c80 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d127      	bne.n	8000cf2 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x80>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x80>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6593      	str	r3, [r2, #88]	; 0x58
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x80>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x80>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x80>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x80>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cd2:	2330      	movs	r3, #48	; 0x30
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_TIM_Encoder_MspInit+0x84>)
 8000cee:	f001 f9b9 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40000400 	.word	0x40000400
 8000d00:	40021000 	.word	0x40021000
 8000d04:	48000400 	.word	0x48000400

08000d08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <HAL_TIM_Base_MspInit+0x44>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d113      	bne.n	8000d42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_TIM_Base_MspInit+0x48>)
 8000d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1e:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <HAL_TIM_Base_MspInit+0x48>)
 8000d20:	f043 0310 	orr.w	r3, r3, #16
 8000d24:	6593      	str	r3, [r2, #88]	; 0x58
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_TIM_Base_MspInit+0x48>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	2036      	movs	r0, #54	; 0x36
 8000d38:	f001 f95d 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d3c:	2036      	movs	r0, #54	; 0x36
 8000d3e:	f001 f976 	bl	800202e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40001000 	.word	0x40001000
 8000d50:	40021000 	.word	0x40021000

08000d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0ac      	sub	sp, #176	; 0xb0
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2288      	movs	r2, #136	; 0x88
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f004 fc97 	bl	80056a8 <memset>
  if(huart->Instance==USART2)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <HAL_UART_MspInit+0xb0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d13b      	bne.n	8000dfc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 faf5 	bl	8003380 <HAL_RCCEx_PeriphCLKConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d9c:	f7ff fefa 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_UART_MspInit+0xb4>)
 8000da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da4:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <HAL_UART_MspInit+0xb4>)
 8000da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000daa:	6593      	str	r3, [r2, #88]	; 0x58
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_UART_MspInit+0xb4>)
 8000dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <HAL_UART_MspInit+0xb4>)
 8000dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbc:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <HAL_UART_MspInit+0xb4>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_UART_MspInit+0xb4>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dd0:	230c      	movs	r3, #12
 8000dd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de8:	2307      	movs	r3, #7
 8000dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df8:	f001 f934 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	37b0      	adds	r7, #176	; 0xb0
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40004400 	.word	0x40004400
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0ac      	sub	sp, #176	; 0xb0
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2288      	movs	r2, #136	; 0x88
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f004 fc3b 	bl	80056a8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e3a:	d16b      	bne.n	8000f14 <HAL_PCD_MspInit+0x108>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e40:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000e42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000e52:	2318      	movs	r3, #24
 8000e54:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e56:	2307      	movs	r3, #7
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000e62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 fa87 	bl	8003380 <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000e78:	f7ff fe8c 	bl	8000b94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <HAL_PCD_MspInit+0x110>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	4a26      	ldr	r2, [pc, #152]	; (8000f1c <HAL_PCD_MspInit+0x110>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <HAL_PCD_MspInit+0x110>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000eae:	230a      	movs	r3, #10
 8000eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f001 f8d1 	bl	8002064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_PCD_MspInit+0x110>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <HAL_PCD_MspInit+0x110>)
 8000ec8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_PCD_MspInit+0x110>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <HAL_PCD_MspInit+0x110>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d114      	bne.n	8000f10 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <HAL_PCD_MspInit+0x110>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <HAL_PCD_MspInit+0x110>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_PCD_MspInit+0x110>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000efe:	f001 fc2f 	bl	8002760 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_PCD_MspInit+0x110>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <HAL_PCD_MspInit+0x110>)
 8000f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f0e:	e001      	b.n	8000f14 <HAL_PCD_MspInit+0x108>
      HAL_PWREx_EnableVddUSB();
 8000f10:	f001 fc26 	bl	8002760 <HAL_PWREx_EnableVddUSB>
}
 8000f14:	bf00      	nop
 8000f16:	37b0      	adds	r7, #176	; 0xb0
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021000 	.word	0x40021000

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6c:	f000 f8e4 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <CAN1_RX0_IRQHandler+0x10>)
 8000f7a:	f000 fd32 	bl	80019e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000008c 	.word	0x2000008c

08000f88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <TIM6_DAC_IRQHandler+0x10>)
 8000f8e:	f003 f8bf 	bl	8004110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000100 	.word	0x20000100

08000f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <_sbrk+0x5c>)
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <_sbrk+0x60>)
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <_sbrk+0x64>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <_sbrk+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d207      	bcs.n	8000fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fcc:	f004 fb42 	bl	8005654 <__errno>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	e009      	b.n	8000ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <_sbrk+0x64>)
 8000fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20018000 	.word	0x20018000
 8000ffc:	00000400 	.word	0x00000400
 8001000:	2000071c 	.word	0x2000071c
 8001004:	20000738 	.word	0x20000738

08001008 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <SystemInit+0x20>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <SystemInit+0x20>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001064 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001030:	f7ff ffea 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <LoopForever+0x6>)
  ldr r1, =_edata
 8001036:	490d      	ldr	r1, [pc, #52]	; (800106c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001038:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <LoopForever+0xe>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <LoopForever+0x12>)
  ldr r4, =_ebss
 800104c:	4c0a      	ldr	r4, [pc, #40]	; (8001078 <LoopForever+0x16>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105a:	f004 fb01 	bl	8005660 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800105e:	f7ff fa89 	bl	8000574 <main>

08001062 <LoopForever>:

LoopForever:
    b LoopForever
 8001062:	e7fe      	b.n	8001062 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001064:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001070:	080060a8 	.word	0x080060a8
  ldr r2, =_sbss
 8001074:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001078:	20000734 	.word	0x20000734

0800107c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC1_2_IRQHandler>
	...

08001080 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HAL_Init+0x3c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <HAL_Init+0x3c>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001096:	2003      	movs	r0, #3
 8001098:	f000 ffa2 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800109c:	2000      	movs	r0, #0
 800109e:	f000 f80f 	bl	80010c0 <HAL_InitTick>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	e001      	b.n	80010b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ae:	f7ff fd77 	bl	8000ba0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010b2:	79fb      	ldrb	r3, [r7, #7]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40022000 	.word	0x40022000

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <HAL_InitTick+0x6c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d023      	beq.n	800111c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_InitTick+0x70>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <HAL_InitTick+0x6c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4619      	mov	r1, r3
 80010de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 ffad 	bl	800204a <HAL_SYSTICK_Config>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10f      	bne.n	8001116 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d809      	bhi.n	8001110 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f000 ff77 	bl	8001ff6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001108:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <HAL_InitTick+0x74>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e007      	b.n	8001120 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e004      	b.n	8001120 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	e001      	b.n	8001120 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	20000000 	.word	0x20000000
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008
 800115c:	20000720 	.word	0x20000720

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000720 	.word	0x20000720

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff ffee 	bl	8001160 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_Delay+0x44>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffde 	bl	8001160 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008

080011c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e0ed      	b.n	80013ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fd02 	bl	8000be8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0201 	orr.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f4:	f7ff ffb4 	bl	8001160 <HAL_GetTick>
 80011f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011fa:	e012      	b.n	8001222 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011fc:	f7ff ffb0 	bl	8001160 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b0a      	cmp	r3, #10
 8001208:	d90b      	bls.n	8001222 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2205      	movs	r2, #5
 800121a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e0c5      	b.n	80013ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0e5      	beq.n	80011fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0202 	bic.w	r2, r2, #2
 800123e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001240:	f7ff ff8e 	bl	8001160 <HAL_GetTick>
 8001244:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001246:	e012      	b.n	800126e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001248:	f7ff ff8a 	bl	8001160 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b0a      	cmp	r3, #10
 8001254:	d90b      	bls.n	800126e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2205      	movs	r2, #5
 8001266:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e09f      	b.n	80013ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1e5      	bne.n	8001248 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7e1b      	ldrb	r3, [r3, #24]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d108      	bne.n	8001296 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e007      	b.n	80012a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7e5b      	ldrb	r3, [r3, #25]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d108      	bne.n	80012c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e007      	b.n	80012d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7e9b      	ldrb	r3, [r3, #26]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d108      	bne.n	80012ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0220 	orr.w	r2, r2, #32
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e007      	b.n	80012fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0220 	bic.w	r2, r2, #32
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7edb      	ldrb	r3, [r3, #27]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d108      	bne.n	8001314 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0210 	bic.w	r2, r2, #16
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	e007      	b.n	8001324 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0210 	orr.w	r2, r2, #16
 8001322:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7f1b      	ldrb	r3, [r3, #28]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d108      	bne.n	800133e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0208 	orr.w	r2, r2, #8
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e007      	b.n	800134e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0208 	bic.w	r2, r2, #8
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7f5b      	ldrb	r3, [r3, #29]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d108      	bne.n	8001368 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 0204 	orr.w	r2, r2, #4
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e007      	b.n	8001378 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0204 	bic.w	r2, r2, #4
 8001376:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	ea42 0103 	orr.w	r1, r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	1e5a      	subs	r2, r3, #1
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	430a      	orrs	r2, r1
 800139c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b087      	sub	sp, #28
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013cc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013ce:	7cfb      	ldrb	r3, [r7, #19]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d003      	beq.n	80013dc <HAL_CAN_ConfigFilter+0x26>
 80013d4:	7cfb      	ldrb	r3, [r7, #19]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	f040 80aa 	bne.w	8001530 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013e2:	f043 0201 	orr.w	r2, r3, #1
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f003 031f 	and.w	r3, r3, #31
 80013f4:	2201      	movs	r2, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43db      	mvns	r3, r3
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d123      	bne.n	800145e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	43db      	mvns	r3, r3
 8001420:	401a      	ands	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001438:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3248      	adds	r2, #72	; 0x48
 800143e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001452:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001454:	6979      	ldr	r1, [r7, #20]
 8001456:	3348      	adds	r3, #72	; 0x48
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	440b      	add	r3, r1
 800145c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d122      	bne.n	80014ac <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	431a      	orrs	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001486:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3248      	adds	r2, #72	; 0x48
 800148c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014a2:	6979      	ldr	r1, [r7, #20]
 80014a4:	3348      	adds	r3, #72	; 0x48
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	440b      	add	r3, r1
 80014aa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d109      	bne.n	80014c8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014c6:	e007      	b.n	80014d8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	431a      	orrs	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d109      	bne.n	80014f4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80014f2:	e007      	b.n	8001504 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d107      	bne.n	800151c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	431a      	orrs	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001522:	f023 0201 	bic.w	r2, r3, #1
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	e006      	b.n	800153e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
  }
}
 800153e:	4618      	mov	r0, r3
 8001540:	371c      	adds	r7, #28
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d12e      	bne.n	80015bc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2202      	movs	r2, #2
 8001562:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0201 	bic.w	r2, r2, #1
 8001574:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001576:	f7ff fdf3 	bl	8001160 <HAL_GetTick>
 800157a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800157c:	e012      	b.n	80015a4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800157e:	f7ff fdef 	bl	8001160 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b0a      	cmp	r3, #10
 800158a:	d90b      	bls.n	80015a4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2205      	movs	r2, #5
 800159c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e012      	b.n	80015ca <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1e5      	bne.n	800157e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e006      	b.n	80015ca <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
  }
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b089      	sub	sp, #36	; 0x24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015f0:	7ffb      	ldrb	r3, [r7, #31]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d003      	beq.n	80015fe <HAL_CAN_AddTxMessage+0x2c>
 80015f6:	7ffb      	ldrb	r3, [r7, #31]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	f040 80ad 	bne.w	8001758 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10a      	bne.n	800161e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800160e:	2b00      	cmp	r3, #0
 8001610:	d105      	bne.n	800161e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8095 	beq.w	8001748 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	0e1b      	lsrs	r3, r3, #24
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001628:	2201      	movs	r2, #1
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	409a      	lsls	r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10d      	bne.n	8001656 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001644:	68f9      	ldr	r1, [r7, #12]
 8001646:	6809      	ldr	r1, [r1, #0]
 8001648:	431a      	orrs	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3318      	adds	r3, #24
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	440b      	add	r3, r1
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e00f      	b.n	8001676 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001660:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001666:	68f9      	ldr	r1, [r7, #12]
 8001668:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800166a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3318      	adds	r3, #24
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	440b      	add	r3, r1
 8001674:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	691a      	ldr	r2, [r3, #16]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3318      	adds	r3, #24
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	440b      	add	r3, r1
 8001686:	3304      	adds	r3, #4
 8001688:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	7d1b      	ldrb	r3, [r3, #20]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d111      	bne.n	80016b6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3318      	adds	r3, #24
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	4413      	add	r3, r2
 800169e:	3304      	adds	r3, #4
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	6811      	ldr	r1, [r2, #0]
 80016a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3318      	adds	r3, #24
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	440b      	add	r3, r1
 80016b2:	3304      	adds	r3, #4
 80016b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3307      	adds	r3, #7
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	061a      	lsls	r2, r3, #24
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3306      	adds	r3, #6
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	041b      	lsls	r3, r3, #16
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3305      	adds	r3, #5
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	4313      	orrs	r3, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	3204      	adds	r2, #4
 80016d6:	7812      	ldrb	r2, [r2, #0]
 80016d8:	4610      	mov	r0, r2
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	6811      	ldr	r1, [r2, #0]
 80016de:	ea43 0200 	orr.w	r2, r3, r0
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	440b      	add	r3, r1
 80016e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80016ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3303      	adds	r3, #3
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	061a      	lsls	r2, r3, #24
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3302      	adds	r3, #2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	041b      	lsls	r3, r3, #16
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3301      	adds	r3, #1
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	4313      	orrs	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	4610      	mov	r0, r2
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	6811      	ldr	r1, [r2, #0]
 8001714:	ea43 0200 	orr.w	r2, r3, r0
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	440b      	add	r3, r1
 800171e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001722:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3318      	adds	r3, #24
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	4413      	add	r3, r2
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	6811      	ldr	r1, [r2, #0]
 8001736:	f043 0201 	orr.w	r2, r3, #1
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3318      	adds	r3, #24
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	440b      	add	r3, r1
 8001742:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	e00e      	b.n	8001766 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e006      	b.n	8001766 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
  }
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001772:	b480      	push	{r7}
 8001774:	b087      	sub	sp, #28
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001786:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d003      	beq.n	8001796 <HAL_CAN_GetRxMessage+0x24>
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	2b02      	cmp	r3, #2
 8001792:	f040 80f3 	bne.w	800197c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10e      	bne.n	80017ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d116      	bne.n	80017d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0e7      	b.n	800198a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d107      	bne.n	80017d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0d8      	b.n	800198a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	331b      	adds	r3, #27
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	4413      	add	r3, r2
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0204 	and.w	r2, r3, #4
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10c      	bne.n	8001810 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	331b      	adds	r3, #27
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	0d5b      	lsrs	r3, r3, #21
 8001806:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e00b      	b.n	8001828 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	331b      	adds	r3, #27
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4413      	add	r3, r2
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	08db      	lsrs	r3, r3, #3
 8001820:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	331b      	adds	r3, #27
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0202 	and.w	r2, r3, #2
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	331b      	adds	r3, #27
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	4413      	add	r3, r2
 800184a:	3304      	adds	r3, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 020f 	and.w	r2, r3, #15
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	331b      	adds	r3, #27
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	4413      	add	r3, r2
 8001862:	3304      	adds	r3, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	0a1b      	lsrs	r3, r3, #8
 8001868:	b2da      	uxtb	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	331b      	adds	r3, #27
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	4413      	add	r3, r2
 800187a:	3304      	adds	r3, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0c1b      	lsrs	r3, r3, #16
 8001880:	b29a      	uxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	4413      	add	r3, r2
 8001890:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0a1a      	lsrs	r2, r3, #8
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0c1a      	lsrs	r2, r3, #16
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	3302      	adds	r3, #2
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	4413      	add	r3, r2
 80018da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	0e1a      	lsrs	r2, r3, #24
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	3303      	adds	r3, #3
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	4413      	add	r3, r2
 80018f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	3304      	adds	r3, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0a1a      	lsrs	r2, r3, #8
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	3305      	adds	r3, #5
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	4413      	add	r3, r2
 8001926:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0c1a      	lsrs	r2, r3, #16
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	3306      	adds	r3, #6
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	4413      	add	r3, r2
 8001940:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	0e1a      	lsrs	r2, r3, #24
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	3307      	adds	r3, #7
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d108      	bne.n	8001968 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0220 	orr.w	r2, r2, #32
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	e007      	b.n	8001978 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0220 	orr.w	r2, r2, #32
 8001976:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	e006      	b.n	800198a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
  }
}
 800198a:	4618      	mov	r0, r3
 800198c:	371c      	adds	r7, #28
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d002      	beq.n	80019b4 <HAL_CAN_ActivateNotification+0x1e>
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d109      	bne.n	80019c8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6959      	ldr	r1, [r3, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e006      	b.n	80019d6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
  }
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b08a      	sub	sp, #40	; 0x28
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d07c      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d023      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2201      	movs	r2, #1
 8001a38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f983 	bl	8001d50 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a4a:	e016      	b.n	8001a7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5e:	e00c      	b.n	8001a7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d004      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
 8001a72:	e002      	b.n	8001a7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f989 	bl	8001d8c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d024      	beq.n	8001ace <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f963 	bl	8001d64 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a9e:	e016      	b.n	8001ace <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d004      	beq.n	8001ab4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab2:	e00c      	b.n	8001ace <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d004      	beq.n	8001ac8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac6:	e002      	b.n	8001ace <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f969 	bl	8001da0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d024      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ae0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f943 	bl	8001d78 <HAL_CAN_TxMailbox2CompleteCallback>
 8001af2:	e016      	b.n	8001b22 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
 8001b06:	e00c      	b.n	8001b22 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d004      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1a:	e002      	b.n	8001b22 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f949 	bl	8001db4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00c      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2210      	movs	r2, #16
 8001b44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00b      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d006      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2208      	movs	r2, #8
 8001b60:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f930 	bl	8001dc8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d009      	beq.n	8001b86 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7fe ff91 	bl	8000aa8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00c      	beq.n	8001baa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	f003 0320 	and.w	r3, r3, #32
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00b      	beq.n	8001bcc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2208      	movs	r2, #8
 8001bc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f912 	bl	8001df0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d009      	beq.n	8001bea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f8f9 	bl	8001ddc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00b      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d006      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2210      	movs	r2, #16
 8001c04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8fc 	bl	8001e04 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00b      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2208      	movs	r2, #8
 8001c26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f8f5 	bl	8001e18 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d07b      	beq.n	8001d30 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d072      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d008      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d043      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d03e      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cb0:	2b60      	cmp	r3, #96	; 0x60
 8001cb2:	d02b      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x32a>
 8001cb4:	2b60      	cmp	r3, #96	; 0x60
 8001cb6:	d82e      	bhi.n	8001d16 <HAL_CAN_IRQHandler+0x334>
 8001cb8:	2b50      	cmp	r3, #80	; 0x50
 8001cba:	d022      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x320>
 8001cbc:	2b50      	cmp	r3, #80	; 0x50
 8001cbe:	d82a      	bhi.n	8001d16 <HAL_CAN_IRQHandler+0x334>
 8001cc0:	2b40      	cmp	r3, #64	; 0x40
 8001cc2:	d019      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0x316>
 8001cc4:	2b40      	cmp	r3, #64	; 0x40
 8001cc6:	d826      	bhi.n	8001d16 <HAL_CAN_IRQHandler+0x334>
 8001cc8:	2b30      	cmp	r3, #48	; 0x30
 8001cca:	d010      	beq.n	8001cee <HAL_CAN_IRQHandler+0x30c>
 8001ccc:	2b30      	cmp	r3, #48	; 0x30
 8001cce:	d822      	bhi.n	8001d16 <HAL_CAN_IRQHandler+0x334>
 8001cd0:	2b10      	cmp	r3, #16
 8001cd2:	d002      	beq.n	8001cda <HAL_CAN_IRQHandler+0x2f8>
 8001cd4:	2b20      	cmp	r3, #32
 8001cd6:	d005      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cd8:	e01d      	b.n	8001d16 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ce2:	e019      	b.n	8001d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	f043 0310 	orr.w	r3, r3, #16
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cec:	e014      	b.n	8001d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	f043 0320 	orr.w	r3, r3, #32
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cf6:	e00f      	b.n	8001d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d00:	e00a      	b.n	8001d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d0a:	e005      	b.n	8001d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d14:	e000      	b.n	8001d18 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d16:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d26:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d008      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f872 	bl	8001e2c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e72:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	60d3      	str	r3, [r2, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	f003 0307 	and.w	r3, r3, #7
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db0b      	blt.n	8001ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	4907      	ldr	r1, [pc, #28]	; (8001edc <__NVIC_EnableIRQ+0x38>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000e100 	.word	0xe000e100

08001ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	db0a      	blt.n	8001f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	490c      	ldr	r1, [pc, #48]	; (8001f2c <__NVIC_SetPriority+0x4c>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	440b      	add	r3, r1
 8001f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f08:	e00a      	b.n	8001f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	; (8001f30 <__NVIC_SetPriority+0x50>)
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3b04      	subs	r3, #4
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	761a      	strb	r2, [r3, #24]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f1c3 0307 	rsb	r3, r3, #7
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	bf28      	it	cs
 8001f52:	2304      	movcs	r3, #4
 8001f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d902      	bls.n	8001f64 <NVIC_EncodePriority+0x30>
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3b03      	subs	r3, #3
 8001f62:	e000      	b.n	8001f66 <NVIC_EncodePriority+0x32>
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	4313      	orrs	r3, r2
         );
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f7ff ff8e 	bl	8001ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff29 	bl	8001e40 <__NVIC_SetPriorityGrouping>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002008:	f7ff ff3e 	bl	8001e88 <__NVIC_GetPriorityGrouping>
 800200c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	6978      	ldr	r0, [r7, #20]
 8002014:	f7ff ff8e 	bl	8001f34 <NVIC_EncodePriority>
 8002018:	4602      	mov	r2, r0
 800201a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff5d 	bl	8001ee0 <__NVIC_SetPriority>
}
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff31 	bl	8001ea4 <__NVIC_EnableIRQ>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ffa2 	bl	8001f9c <SysTick_Config>
 8002058:	4603      	mov	r3, r0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002072:	e17f      	b.n	8002374 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	2101      	movs	r1, #1
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	4013      	ands	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8171 	beq.w	800236e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d005      	beq.n	80020a4 <HAL_GPIO_Init+0x40>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d130      	bne.n	8002106 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020da:	2201      	movs	r2, #1
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	f003 0201 	and.w	r2, r3, #1
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b03      	cmp	r3, #3
 8002110:	d118      	bne.n	8002144 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002118:	2201      	movs	r2, #1
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	08db      	lsrs	r3, r3, #3
 800212e:	f003 0201 	and.w	r2, r3, #1
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b03      	cmp	r3, #3
 800214e:	d017      	beq.n	8002180 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d123      	bne.n	80021d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002198:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	08da      	lsrs	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3208      	adds	r2, #8
 80021ce:	6939      	ldr	r1, [r7, #16]
 80021d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0203 	and.w	r2, r3, #3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80ac 	beq.w	800236e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	4b5f      	ldr	r3, [pc, #380]	; (8002394 <HAL_GPIO_Init+0x330>)
 8002218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221a:	4a5e      	ldr	r2, [pc, #376]	; (8002394 <HAL_GPIO_Init+0x330>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6613      	str	r3, [r2, #96]	; 0x60
 8002222:	4b5c      	ldr	r3, [pc, #368]	; (8002394 <HAL_GPIO_Init+0x330>)
 8002224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800222e:	4a5a      	ldr	r2, [pc, #360]	; (8002398 <HAL_GPIO_Init+0x334>)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	220f      	movs	r2, #15
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002258:	d025      	beq.n	80022a6 <HAL_GPIO_Init+0x242>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4f      	ldr	r2, [pc, #316]	; (800239c <HAL_GPIO_Init+0x338>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01f      	beq.n	80022a2 <HAL_GPIO_Init+0x23e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4e      	ldr	r2, [pc, #312]	; (80023a0 <HAL_GPIO_Init+0x33c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d019      	beq.n	800229e <HAL_GPIO_Init+0x23a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4d      	ldr	r2, [pc, #308]	; (80023a4 <HAL_GPIO_Init+0x340>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_GPIO_Init+0x236>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4c      	ldr	r2, [pc, #304]	; (80023a8 <HAL_GPIO_Init+0x344>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00d      	beq.n	8002296 <HAL_GPIO_Init+0x232>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4b      	ldr	r2, [pc, #300]	; (80023ac <HAL_GPIO_Init+0x348>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <HAL_GPIO_Init+0x22e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4a      	ldr	r2, [pc, #296]	; (80023b0 <HAL_GPIO_Init+0x34c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_GPIO_Init+0x22a>
 800228a:	2306      	movs	r3, #6
 800228c:	e00c      	b.n	80022a8 <HAL_GPIO_Init+0x244>
 800228e:	2307      	movs	r3, #7
 8002290:	e00a      	b.n	80022a8 <HAL_GPIO_Init+0x244>
 8002292:	2305      	movs	r3, #5
 8002294:	e008      	b.n	80022a8 <HAL_GPIO_Init+0x244>
 8002296:	2304      	movs	r3, #4
 8002298:	e006      	b.n	80022a8 <HAL_GPIO_Init+0x244>
 800229a:	2303      	movs	r3, #3
 800229c:	e004      	b.n	80022a8 <HAL_GPIO_Init+0x244>
 800229e:	2302      	movs	r3, #2
 80022a0:	e002      	b.n	80022a8 <HAL_GPIO_Init+0x244>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_Init+0x244>
 80022a6:	2300      	movs	r3, #0
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	f002 0203 	and.w	r2, r2, #3
 80022ae:	0092      	lsls	r2, r2, #2
 80022b0:	4093      	lsls	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022b8:	4937      	ldr	r1, [pc, #220]	; (8002398 <HAL_GPIO_Init+0x334>)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	3302      	adds	r3, #2
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022c6:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <HAL_GPIO_Init+0x350>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022ea:	4a32      	ldr	r2, [pc, #200]	; (80023b4 <HAL_GPIO_Init+0x350>)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022f0:	4b30      	ldr	r3, [pc, #192]	; (80023b4 <HAL_GPIO_Init+0x350>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002314:	4a27      	ldr	r2, [pc, #156]	; (80023b4 <HAL_GPIO_Init+0x350>)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800231a:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <HAL_GPIO_Init+0x350>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800233e:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_GPIO_Init+0x350>)
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002344:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_GPIO_Init+0x350>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002368:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <HAL_GPIO_Init+0x350>)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	f47f ae78 	bne.w	8002074 <HAL_GPIO_Init+0x10>
  }
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	40010000 	.word	0x40010000
 800239c:	48000400 	.word	0x48000400
 80023a0:	48000800 	.word	0x48000800
 80023a4:	48000c00 	.word	0x48000c00
 80023a8:	48001000 	.word	0x48001000
 80023ac:	48001400 	.word	0x48001400
 80023b0:	48001800 	.word	0x48001800
 80023b4:	40010400 	.word	0x40010400

080023b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]
 80023c4:	4613      	mov	r3, r2
 80023c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c8:	787b      	ldrb	r3, [r7, #1]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023d4:	e002      	b.n	80023dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	b08f      	sub	sp, #60	; 0x3c
 80023ec:	af0a      	add	r7, sp, #40	; 0x28
 80023ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e116      	b.n	8002628 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d106      	bne.n	800241a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7fe fcf9 	bl	8000e0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2203      	movs	r2, #3
 800241e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f002 fe82 	bl	8005142 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	687e      	ldr	r6, [r7, #4]
 8002446:	466d      	mov	r5, sp
 8002448:	f106 0410 	add.w	r4, r6, #16
 800244c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002454:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002458:	e885 0003 	stmia.w	r5, {r0, r1}
 800245c:	1d33      	adds	r3, r6, #4
 800245e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002460:	6838      	ldr	r0, [r7, #0]
 8002462:	f002 fe42 	bl	80050ea <USB_CoreInit>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0d7      	b.n	8002628 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f002 fe70 	bl	8005164 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]
 8002488:	e04a      	b.n	8002520 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	333d      	adds	r3, #61	; 0x3d
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800249e:	7bfa      	ldrb	r2, [r7, #15]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	333c      	adds	r3, #60	; 0x3c
 80024ae:	7bfa      	ldrb	r2, [r7, #15]
 80024b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	b298      	uxth	r0, r3
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3344      	adds	r3, #68	; 0x44
 80024c6:	4602      	mov	r2, r0
 80024c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	3340      	adds	r3, #64	; 0x40
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	3348      	adds	r3, #72	; 0x48
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	334c      	adds	r3, #76	; 0x4c
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	3354      	adds	r3, #84	; 0x54
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251a:	7bfb      	ldrb	r3, [r7, #15]
 800251c:	3301      	adds	r3, #1
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	d3af      	bcc.n	800248a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	e044      	b.n	80025ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3301      	adds	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d3b5      	bcc.n	8002530 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	687e      	ldr	r6, [r7, #4]
 80025cc:	466d      	mov	r5, sp
 80025ce:	f106 0410 	add.w	r4, r6, #16
 80025d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025de:	e885 0003 	stmia.w	r5, {r0, r1}
 80025e2:	1d33      	adds	r3, r6, #4
 80025e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025e6:	6838      	ldr	r0, [r7, #0]
 80025e8:	f002 fe08 	bl	80051fc <USB_DevInit>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2202      	movs	r2, #2
 80025f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e014      	b.n	8002628 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	2b01      	cmp	r3, #1
 8002614:	d102      	bne.n	800261c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f80a 	bl	8002630 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f002 ffb4 	bl	800558e <USB_DevDisconnect>

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002630 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002662:	f043 0303 	orr.w	r3, r3, #3
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002686:	6013      	str	r3, [r2, #0]
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40007000 	.word	0x40007000

08002698 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40007000 	.word	0x40007000

080026b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c2:	d130      	bne.n	8002726 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026c4:	4b23      	ldr	r3, [pc, #140]	; (8002754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d0:	d038      	beq.n	8002744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026da:	4a1e      	ldr	r2, [pc, #120]	; (8002754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2232      	movs	r2, #50	; 0x32
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	4a1b      	ldr	r2, [pc, #108]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0c9b      	lsrs	r3, r3, #18
 80026f4:	3301      	adds	r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026f8:	e002      	b.n	8002700 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270c:	d102      	bne.n	8002714 <HAL_PWREx_ControlVoltageScaling+0x60>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f2      	bne.n	80026fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002720:	d110      	bne.n	8002744 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e00f      	b.n	8002746 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800272e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002732:	d007      	beq.n	8002744 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002734:	4b07      	ldr	r3, [pc, #28]	; (8002754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800273c:	4a05      	ldr	r2, [pc, #20]	; (8002754 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002742:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40007000 	.word	0x40007000
 8002758:	20000000 	.word	0x20000000
 800275c:	431bde83 	.word	0x431bde83

08002760 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a04      	ldr	r2, [pc, #16]	; (800277c <HAL_PWREx_EnableVddUSB+0x1c>)
 800276a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800276e:	6053      	str	r3, [r2, #4]
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40007000 	.word	0x40007000

08002780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e3ca      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002792:	4b97      	ldr	r3, [pc, #604]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800279c:	4b94      	ldr	r3, [pc, #592]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80e4 	beq.w	800297c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <HAL_RCC_OscConfig+0x4a>
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	f040 808b 	bne.w	80028d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	f040 8087 	bne.w	80028d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ca:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_RCC_OscConfig+0x62>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e3a2      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1a      	ldr	r2, [r3, #32]
 80027e6:	4b82      	ldr	r3, [pc, #520]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <HAL_RCC_OscConfig+0x7c>
 80027f2:	4b7f      	ldr	r3, [pc, #508]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027fa:	e005      	b.n	8002808 <HAL_RCC_OscConfig+0x88>
 80027fc:	4b7c      	ldr	r3, [pc, #496]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80027fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002808:	4293      	cmp	r3, r2
 800280a:	d223      	bcs.n	8002854 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fd55 	bl	80032c0 <RCC_SetFlashLatencyFromMSIRange>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e383      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002820:	4b73      	ldr	r3, [pc, #460]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a72      	ldr	r2, [pc, #456]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002826:	f043 0308 	orr.w	r3, r3, #8
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4b70      	ldr	r3, [pc, #448]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	496d      	ldr	r1, [pc, #436]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800283e:	4b6c      	ldr	r3, [pc, #432]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	4968      	ldr	r1, [pc, #416]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
 8002852:	e025      	b.n	80028a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002854:	4b66      	ldr	r3, [pc, #408]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a65      	ldr	r2, [pc, #404]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800285a:	f043 0308 	orr.w	r3, r3, #8
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4960      	ldr	r1, [pc, #384]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002872:	4b5f      	ldr	r3, [pc, #380]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	495b      	ldr	r1, [pc, #364]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fd15 	bl	80032c0 <RCC_SetFlashLatencyFromMSIRange>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e343      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028a0:	f000 fc4a 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b52      	ldr	r3, [pc, #328]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	4950      	ldr	r1, [pc, #320]	; (80029f4 <HAL_RCC_OscConfig+0x274>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	4a4e      	ldr	r2, [pc, #312]	; (80029f8 <HAL_RCC_OscConfig+0x278>)
 80028be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028c0:	4b4e      	ldr	r3, [pc, #312]	; (80029fc <HAL_RCC_OscConfig+0x27c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe fbfb 	bl	80010c0 <HAL_InitTick>
 80028ca:	4603      	mov	r3, r0
 80028cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d052      	beq.n	800297a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	e327      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d032      	beq.n	8002946 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028e0:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a42      	ldr	r2, [pc, #264]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028ec:	f7fe fc38 	bl	8001160 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028f4:	f7fe fc34 	bl	8001160 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e310      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002906:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002912:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a36      	ldr	r2, [pc, #216]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002918:	f043 0308 	orr.w	r3, r3, #8
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4931      	ldr	r1, [pc, #196]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800292c:	4313      	orrs	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002930:	4b2f      	ldr	r3, [pc, #188]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	492c      	ldr	r1, [pc, #176]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
 8002944:	e01a      	b.n	800297c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002946:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002952:	f7fe fc05 	bl	8001160 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800295a:	f7fe fc01 	bl	8001160 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e2dd      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800296c:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x1da>
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800297a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d074      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b08      	cmp	r3, #8
 800298c:	d005      	beq.n	800299a <HAL_RCC_OscConfig+0x21a>
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b0c      	cmp	r3, #12
 8002992:	d10e      	bne.n	80029b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d10b      	bne.n	80029b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d064      	beq.n	8002a70 <HAL_RCC_OscConfig+0x2f0>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d160      	bne.n	8002a70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e2ba      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ba:	d106      	bne.n	80029ca <HAL_RCC_OscConfig+0x24a>
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0b      	ldr	r2, [pc, #44]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80029c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	e026      	b.n	8002a18 <HAL_RCC_OscConfig+0x298>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d2:	d115      	bne.n	8002a00 <HAL_RCC_OscConfig+0x280>
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80029da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a02      	ldr	r2, [pc, #8]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	e014      	b.n	8002a18 <HAL_RCC_OscConfig+0x298>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	0800601c 	.word	0x0800601c
 80029f8:	20000000 	.word	0x20000000
 80029fc:	20000004 	.word	0x20000004
 8002a00:	4ba0      	ldr	r3, [pc, #640]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a9f      	ldr	r2, [pc, #636]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b9d      	ldr	r3, [pc, #628]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a9c      	ldr	r2, [pc, #624]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe fb9e 	bl	8001160 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a28:	f7fe fb9a 	bl	8001160 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e276      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3a:	4b92      	ldr	r3, [pc, #584]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x2a8>
 8002a46:	e014      	b.n	8002a72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fb8a 	bl	8001160 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a50:	f7fe fb86 	bl	8001160 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e262      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a62:	4b88      	ldr	r3, [pc, #544]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x2d0>
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d060      	beq.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_OscConfig+0x310>
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d119      	bne.n	8002abe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d116      	bne.n	8002abe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a90:	4b7c      	ldr	r3, [pc, #496]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x328>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e23f      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa8:	4b76      	ldr	r3, [pc, #472]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	061b      	lsls	r3, r3, #24
 8002ab6:	4973      	ldr	r1, [pc, #460]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002abc:	e040      	b.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d023      	beq.n	8002b0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac6:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a6e      	ldr	r2, [pc, #440]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fb45 	bl	8001160 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ada:	f7fe fb41 	bl	8001160 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e21d      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aec:	4b65      	ldr	r3, [pc, #404]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af8:	4b62      	ldr	r3, [pc, #392]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	495f      	ldr	r1, [pc, #380]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
 8002b0c:	e018      	b.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0e:	4b5d      	ldr	r3, [pc, #372]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a5c      	ldr	r2, [pc, #368]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fb21 	bl	8001160 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b22:	f7fe fb1d 	bl	8001160 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1f9      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b34:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f0      	bne.n	8002b22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d03c      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01c      	beq.n	8002b8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b54:	4b4b      	ldr	r3, [pc, #300]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5a:	4a4a      	ldr	r2, [pc, #296]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7fe fafc 	bl	8001160 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7fe faf8 	bl	8001160 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1d4      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b7e:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0ef      	beq.n	8002b6c <HAL_RCC_OscConfig+0x3ec>
 8002b8c:	e01b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8e:	4b3d      	ldr	r3, [pc, #244]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b94:	4a3b      	ldr	r2, [pc, #236]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7fe fadf 	bl	8001160 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba6:	f7fe fadb 	bl	8001160 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e1b7      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bb8:	4b32      	ldr	r3, [pc, #200]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1ef      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80a6 	beq.w	8002d20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bd8:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10d      	bne.n	8002c00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf0:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_RCC_OscConfig+0x508>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d118      	bne.n	8002c3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <HAL_RCC_OscConfig+0x508>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_RCC_OscConfig+0x508>)
 8002c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c18:	f7fe faa2 	bl	8001160 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c20:	f7fe fa9e 	bl	8001160 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e17a      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c32:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_RCC_OscConfig+0x508>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d108      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4d8>
 8002c46:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4c:	4a0d      	ldr	r2, [pc, #52]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c56:	e029      	b.n	8002cac <HAL_RCC_OscConfig+0x52c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d115      	bne.n	8002c8c <HAL_RCC_OscConfig+0x50c>
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002c68:	f043 0304 	orr.w	r3, r3, #4
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	4a03      	ldr	r2, [pc, #12]	; (8002c84 <HAL_RCC_OscConfig+0x504>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c80:	e014      	b.n	8002cac <HAL_RCC_OscConfig+0x52c>
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	4b9c      	ldr	r3, [pc, #624]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	4a9b      	ldr	r2, [pc, #620]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9c:	4b98      	ldr	r3, [pc, #608]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	4a97      	ldr	r2, [pc, #604]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d016      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7fe fa54 	bl	8001160 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7fe fa50 	bl	8001160 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e12a      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd2:	4b8b      	ldr	r3, [pc, #556]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ed      	beq.n	8002cbc <HAL_RCC_OscConfig+0x53c>
 8002ce0:	e015      	b.n	8002d0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7fe fa3d 	bl	8001160 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe fa39 	bl	8001160 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e113      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d00:	4b7f      	ldr	r3, [pc, #508]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ed      	bne.n	8002cea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d0e:	7ffb      	ldrb	r3, [r7, #31]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d105      	bne.n	8002d20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d14:	4b7a      	ldr	r3, [pc, #488]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	4a79      	ldr	r2, [pc, #484]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80fe 	beq.w	8002f26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	f040 80d0 	bne.w	8002ed4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d34:	4b72      	ldr	r3, [pc, #456]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0203 	and.w	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d130      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	3b01      	subs	r3, #1
 8002d54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d127      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d11f      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d74:	2a07      	cmp	r2, #7
 8002d76:	bf14      	ite	ne
 8002d78:	2201      	movne	r2, #1
 8002d7a:	2200      	moveq	r2, #0
 8002d7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d113      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d109      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	3b01      	subs	r3, #1
 8002da4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d06e      	beq.n	8002e88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d069      	beq.n	8002e84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002db0:	4b53      	ldr	r3, [pc, #332]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002dbc:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0ad      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dcc:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a4b      	ldr	r2, [pc, #300]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dd8:	f7fe f9c2 	bl	8001160 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe f9be 	bl	8001160 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e09a      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df2:	4b43      	ldr	r3, [pc, #268]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfe:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	4b40      	ldr	r3, [pc, #256]	; (8002f04 <HAL_RCC_OscConfig+0x784>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e0e:	3a01      	subs	r2, #1
 8002e10:	0112      	lsls	r2, r2, #4
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e18:	0212      	lsls	r2, r2, #8
 8002e1a:	4311      	orrs	r1, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e20:	0852      	lsrs	r2, r2, #1
 8002e22:	3a01      	subs	r2, #1
 8002e24:	0552      	lsls	r2, r2, #21
 8002e26:	4311      	orrs	r1, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e2c:	0852      	lsrs	r2, r2, #1
 8002e2e:	3a01      	subs	r2, #1
 8002e30:	0652      	lsls	r2, r2, #25
 8002e32:	4311      	orrs	r1, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e38:	0912      	lsrs	r2, r2, #4
 8002e3a:	0452      	lsls	r2, r2, #17
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	4930      	ldr	r1, [pc, #192]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e44:	4b2e      	ldr	r3, [pc, #184]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a2d      	ldr	r2, [pc, #180]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e50:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4a2a      	ldr	r2, [pc, #168]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e5c:	f7fe f980 	bl	8001160 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fe f97c 	bl	8001160 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e058      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e82:	e050      	b.n	8002f26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e04f      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d148      	bne.n	8002f26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e94:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4a16      	ldr	r2, [pc, #88]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eac:	f7fe f958 	bl	8001160 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe f954 	bl	8001160 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e030      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x734>
 8002ed2:	e028      	b.n	8002f26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d023      	beq.n	8002f22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <HAL_RCC_OscConfig+0x780>)
 8002ee0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fe f93b 	bl	8001160 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eec:	e00c      	b.n	8002f08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe f937 	bl	8001160 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d905      	bls.n	8002f08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e013      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
 8002f00:	40021000 	.word	0x40021000
 8002f04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_OscConfig+0x7b0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ec      	bne.n	8002eee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_RCC_OscConfig+0x7b0>)
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	4905      	ldr	r1, [pc, #20]	; (8002f30 <HAL_RCC_OscConfig+0x7b0>)
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_OscConfig+0x7b4>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60cb      	str	r3, [r1, #12]
 8002f20:	e001      	b.n	8002f26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	feeefffc 	.word	0xfeeefffc

08002f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0e7      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b75      	ldr	r3, [pc, #468]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d910      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b72      	ldr	r3, [pc, #456]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 0207 	bic.w	r2, r3, #7
 8002f62:	4970      	ldr	r1, [pc, #448]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b6e      	ldr	r3, [pc, #440]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0cf      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d010      	beq.n	8002faa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	4b66      	ldr	r3, [pc, #408]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d908      	bls.n	8002faa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f98:	4b63      	ldr	r3, [pc, #396]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4960      	ldr	r1, [pc, #384]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d04c      	beq.n	8003050 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fbe:	4b5a      	ldr	r3, [pc, #360]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d121      	bne.n	800300e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0a6      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd6:	4b54      	ldr	r3, [pc, #336]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d115      	bne.n	800300e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e09a      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fee:	4b4e      	ldr	r3, [pc, #312]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e08e      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ffe:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e086      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800300e:	4b46      	ldr	r3, [pc, #280]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f023 0203 	bic.w	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4943      	ldr	r1, [pc, #268]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003020:	f7fe f89e 	bl	8001160 <HAL_GetTick>
 8003024:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	e00a      	b.n	800303e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003028:	f7fe f89a 	bl	8001160 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	; 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e06e      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	4b3a      	ldr	r3, [pc, #232]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 020c 	and.w	r2, r3, #12
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	429a      	cmp	r2, r3
 800304e:	d1eb      	bne.n	8003028 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d010      	beq.n	800307e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	4b31      	ldr	r3, [pc, #196]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003068:	429a      	cmp	r2, r3
 800306a:	d208      	bcs.n	800307e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b2e      	ldr	r3, [pc, #184]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	492b      	ldr	r1, [pc, #172]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800307e:	4b29      	ldr	r3, [pc, #164]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d210      	bcs.n	80030ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308c:	4b25      	ldr	r3, [pc, #148]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 0207 	bic.w	r2, r3, #7
 8003094:	4923      	ldr	r1, [pc, #140]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309c:	4b21      	ldr	r3, [pc, #132]	; (8003124 <HAL_RCC_ClockConfig+0x1ec>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d001      	beq.n	80030ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e036      	b.n	800311c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ba:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	4918      	ldr	r1, [pc, #96]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d009      	beq.n	80030ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d8:	4b13      	ldr	r3, [pc, #76]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4910      	ldr	r1, [pc, #64]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ec:	f000 f824 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <HAL_RCC_ClockConfig+0x1f0>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	490b      	ldr	r1, [pc, #44]	; (800312c <HAL_RCC_ClockConfig+0x1f4>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
 8003108:	4a09      	ldr	r2, [pc, #36]	; (8003130 <HAL_RCC_ClockConfig+0x1f8>)
 800310a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_ClockConfig+0x1fc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd ffd5 	bl	80010c0 <HAL_InitTick>
 8003116:	4603      	mov	r3, r0
 8003118:	72fb      	strb	r3, [r7, #11]

  return status;
 800311a:	7afb      	ldrb	r3, [r7, #11]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40022000 	.word	0x40022000
 8003128:	40021000 	.word	0x40021000
 800312c:	0800601c 	.word	0x0800601c
 8003130:	20000000 	.word	0x20000000
 8003134:	20000004 	.word	0x20000004

08003138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003146:	4b3e      	ldr	r3, [pc, #248]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003150:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x34>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b0c      	cmp	r3, #12
 8003164:	d121      	bne.n	80031aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d11e      	bne.n	80031aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800316c:	4b34      	ldr	r3, [pc, #208]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d107      	bne.n	8003188 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003178:	4b31      	ldr	r3, [pc, #196]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 800317a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	f003 030f 	and.w	r3, r3, #15
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	e005      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003188:	4b2d      	ldr	r3, [pc, #180]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003194:	4a2b      	ldr	r2, [pc, #172]	; (8003244 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10d      	bne.n	80031c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d102      	bne.n	80031b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031b0:	4b25      	ldr	r3, [pc, #148]	; (8003248 <HAL_RCC_GetSysClockFreq+0x110>)
 80031b2:	61bb      	str	r3, [r7, #24]
 80031b4:	e004      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031bc:	4b23      	ldr	r3, [pc, #140]	; (800324c <HAL_RCC_GetSysClockFreq+0x114>)
 80031be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	d134      	bne.n	8003230 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031c6:	4b1e      	ldr	r3, [pc, #120]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d003      	beq.n	80031de <HAL_RCC_GetSysClockFreq+0xa6>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d003      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0xac>
 80031dc:	e005      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031de:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <HAL_RCC_GetSysClockFreq+0x110>)
 80031e0:	617b      	str	r3, [r7, #20]
      break;
 80031e2:	e005      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_RCC_GetSysClockFreq+0x114>)
 80031e6:	617b      	str	r3, [r7, #20]
      break;
 80031e8:	e002      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	617b      	str	r3, [r7, #20]
      break;
 80031ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031f0:	4b13      	ldr	r3, [pc, #76]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	3301      	adds	r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031fe:	4b10      	ldr	r3, [pc, #64]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	fb03 f202 	mul.w	r2, r3, r2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_RCC_GetSysClockFreq+0x108>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	0e5b      	lsrs	r3, r3, #25
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	3301      	adds	r3, #1
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003230:	69bb      	ldr	r3, [r7, #24]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3724      	adds	r7, #36	; 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000
 8003244:	08006034 	.word	0x08006034
 8003248:	00f42400 	.word	0x00f42400
 800324c:	007a1200 	.word	0x007a1200

08003250 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <HAL_RCC_GetHCLKFreq+0x14>)
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	20000000 	.word	0x20000000

08003268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800326c:	f7ff fff0 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4904      	ldr	r1, [pc, #16]	; (8003290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003288:	4618      	mov	r0, r3
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40021000 	.word	0x40021000
 8003290:	0800602c 	.word	0x0800602c

08003294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003298:	f7ff ffda 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 800329c:	4602      	mov	r2, r0
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	0adb      	lsrs	r3, r3, #11
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	4904      	ldr	r1, [pc, #16]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80032aa:	5ccb      	ldrb	r3, [r1, r3]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000
 80032bc:	0800602c 	.word	0x0800602c

080032c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032c8:	2300      	movs	r3, #0
 80032ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032cc:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032d8:	f7ff f9de 	bl	8002698 <HAL_PWREx_GetVoltageRange>
 80032dc:	6178      	str	r0, [r7, #20]
 80032de:	e014      	b.n	800330a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032e0:	4b25      	ldr	r3, [pc, #148]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	4a24      	ldr	r2, [pc, #144]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ea:	6593      	str	r3, [r2, #88]	; 0x58
 80032ec:	4b22      	ldr	r3, [pc, #136]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032f8:	f7ff f9ce 	bl	8002698 <HAL_PWREx_GetVoltageRange>
 80032fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032fe:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003308:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003310:	d10b      	bne.n	800332a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d919      	bls.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2ba0      	cmp	r3, #160	; 0xa0
 800331c:	d902      	bls.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800331e:	2302      	movs	r3, #2
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	e013      	b.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003324:	2301      	movs	r3, #1
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	e010      	b.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b80      	cmp	r3, #128	; 0x80
 800332e:	d902      	bls.n	8003336 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003330:	2303      	movs	r3, #3
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	e00a      	b.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b80      	cmp	r3, #128	; 0x80
 800333a:	d102      	bne.n	8003342 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800333c:	2302      	movs	r3, #2
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	e004      	b.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b70      	cmp	r3, #112	; 0x70
 8003346:	d101      	bne.n	800334c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003348:	2301      	movs	r3, #1
 800334a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 0207 	bic.w	r2, r3, #7
 8003354:	4909      	ldr	r1, [pc, #36]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800335c:	4b07      	ldr	r3, [pc, #28]	; (800337c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	429a      	cmp	r2, r3
 8003368:	d001      	beq.n	800336e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	40022000 	.word	0x40022000

08003380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003388:	2300      	movs	r3, #0
 800338a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800338c:	2300      	movs	r3, #0
 800338e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003398:	2b00      	cmp	r3, #0
 800339a:	d041      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033a4:	d02a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033aa:	d824      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033b0:	d008      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033b6:	d81e      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c0:	d010      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033c2:	e018      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033c4:	4b86      	ldr	r3, [pc, #536]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a85      	ldr	r2, [pc, #532]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033d0:	e015      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 facb 	bl	8003974 <RCCEx_PLLSAI1_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033e2:	e00c      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3320      	adds	r3, #32
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fbb6 	bl	8003b5c <RCCEx_PLLSAI2_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033f4:	e003      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	74fb      	strb	r3, [r7, #19]
      break;
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003404:	4b76      	ldr	r3, [pc, #472]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003412:	4973      	ldr	r1, [pc, #460]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800341a:	e001      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d041      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003430:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003434:	d02a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003436:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800343a:	d824      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800343c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003440:	d008      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003442:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003446:	d81e      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800344c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003450:	d010      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003452:	e018      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003454:	4b62      	ldr	r3, [pc, #392]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4a61      	ldr	r2, [pc, #388]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003460:	e015      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fa83 	bl	8003974 <RCCEx_PLLSAI1_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003472:	e00c      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3320      	adds	r3, #32
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fb6e 	bl	8003b5c <RCCEx_PLLSAI2_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003484:	e003      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	74fb      	strb	r3, [r7, #19]
      break;
 800348a:	e000      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800348c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003494:	4b52      	ldr	r3, [pc, #328]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a2:	494f      	ldr	r1, [pc, #316]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034aa:	e001      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80a0 	beq.w	80035fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034c2:	4b47      	ldr	r3, [pc, #284]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00d      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d8:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	4a40      	ldr	r2, [pc, #256]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e2:	6593      	str	r3, [r2, #88]	; 0x58
 80034e4:	4b3e      	ldr	r3, [pc, #248]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f0:	2301      	movs	r3, #1
 80034f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034f4:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a3a      	ldr	r2, [pc, #232]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003500:	f7fd fe2e 	bl	8001160 <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003506:	e009      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003508:	f7fd fe2a 	bl	8001160 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d902      	bls.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	74fb      	strb	r3, [r7, #19]
        break;
 800351a:	e005      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800351c:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ef      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d15c      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800352e:	4b2c      	ldr	r3, [pc, #176]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003538:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01f      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	429a      	cmp	r2, r3
 800354a:	d019      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800354c:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003556:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003558:	4b21      	ldr	r3, [pc, #132]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	4a20      	ldr	r2, [pc, #128]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003568:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003578:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d016      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fd fde9 	bl	8001160 <HAL_GetTick>
 800358e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003590:	e00b      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fd fde5 	bl	8001160 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d902      	bls.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	74fb      	strb	r3, [r7, #19]
            break;
 80035a8:	e006      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d0ec      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ce:	4904      	ldr	r1, [pc, #16]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80035d6:	e009      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	74bb      	strb	r3, [r7, #18]
 80035dc:	e006      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e8:	7cfb      	ldrb	r3, [r7, #19]
 80035ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ec:	7c7b      	ldrb	r3, [r7, #17]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d105      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f2:	4b9e      	ldr	r3, [pc, #632]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	4a9d      	ldr	r2, [pc, #628]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800360a:	4b98      	ldr	r3, [pc, #608]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	f023 0203 	bic.w	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	4994      	ldr	r1, [pc, #592]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800362c:	4b8f      	ldr	r3, [pc, #572]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f023 020c 	bic.w	r2, r3, #12
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	498c      	ldr	r1, [pc, #560]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800364e:	4b87      	ldr	r3, [pc, #540]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	4983      	ldr	r1, [pc, #524]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003670:	4b7e      	ldr	r3, [pc, #504]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	497b      	ldr	r1, [pc, #492]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003692:	4b76      	ldr	r3, [pc, #472]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a0:	4972      	ldr	r1, [pc, #456]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036b4:	4b6d      	ldr	r3, [pc, #436]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c2:	496a      	ldr	r1, [pc, #424]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036d6:	4b65      	ldr	r3, [pc, #404]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e4:	4961      	ldr	r1, [pc, #388]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036f8:	4b5c      	ldr	r3, [pc, #368]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003706:	4959      	ldr	r1, [pc, #356]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800371a:	4b54      	ldr	r3, [pc, #336]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003728:	4950      	ldr	r1, [pc, #320]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800373c:	4b4b      	ldr	r3, [pc, #300]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	4948      	ldr	r1, [pc, #288]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800375e:	4b43      	ldr	r3, [pc, #268]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	493f      	ldr	r1, [pc, #252]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d028      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003780:	4b3a      	ldr	r3, [pc, #232]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378e:	4937      	ldr	r1, [pc, #220]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800379e:	d106      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a0:	4b32      	ldr	r3, [pc, #200]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4a31      	ldr	r2, [pc, #196]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037aa:	60d3      	str	r3, [r2, #12]
 80037ac:	e011      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037b6:	d10c      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3304      	adds	r3, #4
 80037bc:	2101      	movs	r1, #1
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f8d8 	bl	8003974 <RCCEx_PLLSAI1_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037c8:	7cfb      	ldrb	r3, [r7, #19]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d028      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037de:	4b23      	ldr	r3, [pc, #140]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	491f      	ldr	r1, [pc, #124]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037fc:	d106      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037fe:	4b1b      	ldr	r3, [pc, #108]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	4a1a      	ldr	r2, [pc, #104]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003808:	60d3      	str	r3, [r2, #12]
 800380a:	e011      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003814:	d10c      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3304      	adds	r3, #4
 800381a:	2101      	movs	r1, #1
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f8a9 	bl	8003974 <RCCEx_PLLSAI1_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800382c:	7cfb      	ldrb	r3, [r7, #19]
 800382e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d02b      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384a:	4908      	ldr	r1, [pc, #32]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003856:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800385a:	d109      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800385c:	4b03      	ldr	r3, [pc, #12]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4a02      	ldr	r2, [pc, #8]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003866:	60d3      	str	r3, [r2, #12]
 8003868:	e014      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800386a:	bf00      	nop
 800386c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003874:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003878:	d10c      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3304      	adds	r3, #4
 800387e:	2101      	movs	r1, #1
 8003880:	4618      	mov	r0, r3
 8003882:	f000 f877 	bl	8003974 <RCCEx_PLLSAI1_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d02f      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038a0:	4b2b      	ldr	r3, [pc, #172]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ae:	4928      	ldr	r1, [pc, #160]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038be:	d10d      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	2102      	movs	r1, #2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f854 	bl	8003974 <RCCEx_PLLSAI1_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038d0:	7cfb      	ldrb	r3, [r7, #19]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d014      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	74bb      	strb	r3, [r7, #18]
 80038da:	e011      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e4:	d10c      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3320      	adds	r3, #32
 80038ea:	2102      	movs	r1, #2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 f935 	bl	8003b5c <RCCEx_PLLSAI2_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038fc:	7cfb      	ldrb	r3, [r7, #19]
 80038fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800390c:	4b10      	ldr	r3, [pc, #64]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003912:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800391a:	490d      	ldr	r1, [pc, #52]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800393e:	4904      	ldr	r1, [pc, #16]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003946:	7cbb      	ldrb	r3, [r7, #18]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000

08003954 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a04      	ldr	r2, [pc, #16]	; (8003970 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800395e:	f043 0304 	orr.w	r3, r3, #4
 8003962:	6013      	str	r3, [r2, #0]
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000

08003974 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003982:	4b75      	ldr	r3, [pc, #468]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d018      	beq.n	80039c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800398e:	4b72      	ldr	r3, [pc, #456]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0203 	and.w	r2, r3, #3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d10d      	bne.n	80039ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
       ||
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039a6:	4b6c      	ldr	r3, [pc, #432]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
       ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d047      	beq.n	8003a4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
 80039be:	e044      	b.n	8003a4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d018      	beq.n	80039fa <RCCEx_PLLSAI1_Config+0x86>
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d825      	bhi.n	8003a18 <RCCEx_PLLSAI1_Config+0xa4>
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d002      	beq.n	80039d6 <RCCEx_PLLSAI1_Config+0x62>
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d009      	beq.n	80039e8 <RCCEx_PLLSAI1_Config+0x74>
 80039d4:	e020      	b.n	8003a18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039d6:	4b60      	ldr	r3, [pc, #384]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d11d      	bne.n	8003a1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e6:	e01a      	b.n	8003a1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039e8:	4b5b      	ldr	r3, [pc, #364]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d116      	bne.n	8003a22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f8:	e013      	b.n	8003a22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039fa:	4b57      	ldr	r3, [pc, #348]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10f      	bne.n	8003a26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a06:	4b54      	ldr	r3, [pc, #336]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a16:	e006      	b.n	8003a26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a1c:	e004      	b.n	8003a28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a1e:	bf00      	nop
 8003a20:	e002      	b.n	8003a28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a22:	bf00      	nop
 8003a24:	e000      	b.n	8003a28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a26:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10d      	bne.n	8003a4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a2e:	4b4a      	ldr	r3, [pc, #296]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6819      	ldr	r1, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	430b      	orrs	r3, r1
 8003a44:	4944      	ldr	r1, [pc, #272]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d17d      	bne.n	8003b4c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a50:	4b41      	ldr	r3, [pc, #260]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a40      	ldr	r2, [pc, #256]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a5c:	f7fd fb80 	bl	8001160 <HAL_GetTick>
 8003a60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a62:	e009      	b.n	8003a78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a64:	f7fd fb7c 	bl	8001160 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d902      	bls.n	8003a78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	73fb      	strb	r3, [r7, #15]
        break;
 8003a76:	e005      	b.n	8003a84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a78:	4b37      	ldr	r3, [pc, #220]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1ef      	bne.n	8003a64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d160      	bne.n	8003b4c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d111      	bne.n	8003ab4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a90:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6892      	ldr	r2, [r2, #8]
 8003aa0:	0211      	lsls	r1, r2, #8
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68d2      	ldr	r2, [r2, #12]
 8003aa6:	0912      	lsrs	r2, r2, #4
 8003aa8:	0452      	lsls	r2, r2, #17
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	492a      	ldr	r1, [pc, #168]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	610b      	str	r3, [r1, #16]
 8003ab2:	e027      	b.n	8003b04 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d112      	bne.n	8003ae0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aba:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ac2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6892      	ldr	r2, [r2, #8]
 8003aca:	0211      	lsls	r1, r2, #8
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6912      	ldr	r2, [r2, #16]
 8003ad0:	0852      	lsrs	r2, r2, #1
 8003ad2:	3a01      	subs	r2, #1
 8003ad4:	0552      	lsls	r2, r2, #21
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	491f      	ldr	r1, [pc, #124]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	610b      	str	r3, [r1, #16]
 8003ade:	e011      	b.n	8003b04 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ae8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6892      	ldr	r2, [r2, #8]
 8003af0:	0211      	lsls	r1, r2, #8
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6952      	ldr	r2, [r2, #20]
 8003af6:	0852      	lsrs	r2, r2, #1
 8003af8:	3a01      	subs	r2, #1
 8003afa:	0652      	lsls	r2, r2, #25
 8003afc:	430a      	orrs	r2, r1
 8003afe:	4916      	ldr	r1, [pc, #88]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b04:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fd fb26 	bl	8001160 <HAL_GetTick>
 8003b14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b16:	e009      	b.n	8003b2c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b18:	f7fd fb22 	bl	8001160 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d902      	bls.n	8003b2c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	73fb      	strb	r3, [r7, #15]
          break;
 8003b2a:	e005      	b.n	8003b38 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0ef      	beq.n	8003b18 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	4904      	ldr	r1, [pc, #16]	; (8003b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000

08003b5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b6a:	4b6a      	ldr	r3, [pc, #424]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d018      	beq.n	8003ba8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b76:	4b67      	ldr	r3, [pc, #412]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f003 0203 	and.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d10d      	bne.n	8003ba2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
       ||
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b8e:	4b61      	ldr	r3, [pc, #388]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d047      	beq.n	8003c32 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
 8003ba6:	e044      	b.n	8003c32 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d018      	beq.n	8003be2 <RCCEx_PLLSAI2_Config+0x86>
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d825      	bhi.n	8003c00 <RCCEx_PLLSAI2_Config+0xa4>
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d002      	beq.n	8003bbe <RCCEx_PLLSAI2_Config+0x62>
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d009      	beq.n	8003bd0 <RCCEx_PLLSAI2_Config+0x74>
 8003bbc:	e020      	b.n	8003c00 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bbe:	4b55      	ldr	r3, [pc, #340]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d11d      	bne.n	8003c06 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bce:	e01a      	b.n	8003c06 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bd0:	4b50      	ldr	r3, [pc, #320]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d116      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be0:	e013      	b.n	8003c0a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003be2:	4b4c      	ldr	r3, [pc, #304]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10f      	bne.n	8003c0e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bee:	4b49      	ldr	r3, [pc, #292]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bfe:	e006      	b.n	8003c0e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
      break;
 8003c04:	e004      	b.n	8003c10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c06:	bf00      	nop
 8003c08:	e002      	b.n	8003c10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10d      	bne.n	8003c32 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c16:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6819      	ldr	r1, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	4939      	ldr	r1, [pc, #228]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d167      	bne.n	8003d08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c38:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a35      	ldr	r2, [pc, #212]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c44:	f7fd fa8c 	bl	8001160 <HAL_GetTick>
 8003c48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c4a:	e009      	b.n	8003c60 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c4c:	f7fd fa88 	bl	8001160 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d902      	bls.n	8003c60 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	73fb      	strb	r3, [r7, #15]
        break;
 8003c5e:	e005      	b.n	8003c6c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c60:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1ef      	bne.n	8003c4c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d14a      	bne.n	8003d08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d111      	bne.n	8003c9c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c78:	4b26      	ldr	r3, [pc, #152]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6892      	ldr	r2, [r2, #8]
 8003c88:	0211      	lsls	r1, r2, #8
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68d2      	ldr	r2, [r2, #12]
 8003c8e:	0912      	lsrs	r2, r2, #4
 8003c90:	0452      	lsls	r2, r2, #17
 8003c92:	430a      	orrs	r2, r1
 8003c94:	491f      	ldr	r1, [pc, #124]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	614b      	str	r3, [r1, #20]
 8003c9a:	e011      	b.n	8003cc0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ca4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6892      	ldr	r2, [r2, #8]
 8003cac:	0211      	lsls	r1, r2, #8
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6912      	ldr	r2, [r2, #16]
 8003cb2:	0852      	lsrs	r2, r2, #1
 8003cb4:	3a01      	subs	r2, #1
 8003cb6:	0652      	lsls	r2, r2, #25
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	4916      	ldr	r1, [pc, #88]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cc0:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fd fa48 	bl	8001160 <HAL_GetTick>
 8003cd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cd2:	e009      	b.n	8003ce8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cd4:	f7fd fa44 	bl	8001160 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d902      	bls.n	8003ce8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ce6:	e005      	b.n	8003cf4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0ef      	beq.n	8003cd4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfc:	695a      	ldr	r2, [r3, #20]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	4904      	ldr	r1, [pc, #16]	; (8003d14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000

08003d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e049      	b.n	8003dbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fc ffe2 	bl	8000d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f000 fb18 	bl	800438c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d001      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e04f      	b.n	8003e80 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a23      	ldr	r2, [pc, #140]	; (8003e8c <HAL_TIM_Base_Start_IT+0xc4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01d      	beq.n	8003e3e <HAL_TIM_Base_Start_IT+0x76>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0a:	d018      	beq.n	8003e3e <HAL_TIM_Base_Start_IT+0x76>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1f      	ldr	r2, [pc, #124]	; (8003e90 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_TIM_Base_Start_IT+0x76>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00e      	beq.n	8003e3e <HAL_TIM_Base_Start_IT+0x76>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d009      	beq.n	8003e3e <HAL_TIM_Base_Start_IT+0x76>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <HAL_TIM_Base_Start_IT+0xd4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_TIM_Base_Start_IT+0x76>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a19      	ldr	r2, [pc, #100]	; (8003ea0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d115      	bne.n	8003e6a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b06      	cmp	r3, #6
 8003e4e:	d015      	beq.n	8003e7c <HAL_TIM_Base_Start_IT+0xb4>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e56:	d011      	beq.n	8003e7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e68:	e008      	b.n	8003e7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e000      	b.n	8003e7e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	40012c00 	.word	0x40012c00
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	40000c00 	.word	0x40000c00
 8003e9c:	40013400 	.word	0x40013400
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	00010007 	.word	0x00010007

08003ea8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e097      	b.n	8003fec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d106      	bne.n	8003ed6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7fc fed5 	bl	8000c80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003eec:	f023 0307 	bic.w	r3, r3, #7
 8003ef0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	4619      	mov	r1, r3
 8003efc:	4610      	mov	r0, r2
 8003efe:	f000 fa45 	bl	800438c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f48:	f023 030c 	bic.w	r3, r3, #12
 8003f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	4313      	orrs	r3, r2
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	011a      	lsls	r2, r3, #4
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	031b      	lsls	r3, r3, #12
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003f8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004004:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800400c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004014:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800401c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d110      	bne.n	8004046 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d102      	bne.n	8004030 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800402a:	7b7b      	ldrb	r3, [r7, #13]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d001      	beq.n	8004034 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e069      	b.n	8004108 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004044:	e031      	b.n	80040aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b04      	cmp	r3, #4
 800404a:	d110      	bne.n	800406e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800404c:	7bbb      	ldrb	r3, [r7, #14]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d102      	bne.n	8004058 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004052:	7b3b      	ldrb	r3, [r7, #12]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d001      	beq.n	800405c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e055      	b.n	8004108 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800406c:	e01d      	b.n	80040aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d108      	bne.n	8004086 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004074:	7bbb      	ldrb	r3, [r7, #14]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d105      	bne.n	8004086 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800407a:	7b7b      	ldrb	r3, [r7, #13]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d102      	bne.n	8004086 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004080:	7b3b      	ldrb	r3, [r7, #12]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d001      	beq.n	800408a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e03e      	b.n	8004108 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2202      	movs	r2, #2
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2202      	movs	r2, #2
 80040a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_TIM_Encoder_Start+0xc4>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d008      	beq.n	80040c8 <HAL_TIM_Encoder_Start+0xd4>
 80040b6:	e00f      	b.n	80040d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2201      	movs	r2, #1
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 f9fd 	bl	80044c0 <TIM_CCxChannelCmd>
      break;
 80040c6:	e016      	b.n	80040f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2201      	movs	r2, #1
 80040ce:	2104      	movs	r1, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f9f5 	bl	80044c0 <TIM_CCxChannelCmd>
      break;
 80040d6:	e00e      	b.n	80040f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2201      	movs	r2, #1
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 f9ed 	bl	80044c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2201      	movs	r2, #1
 80040ec:	2104      	movs	r1, #4
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f9e6 	bl	80044c0 <TIM_CCxChannelCmd>
      break;
 80040f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d122      	bne.n	800416c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b02      	cmp	r3, #2
 8004132:	d11b      	bne.n	800416c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0202 	mvn.w	r2, #2
 800413c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fc fd14 	bl	8000b80 <HAL_TIM_IC_CaptureCallback>
 8004158:	e005      	b.n	8004166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f8f7 	bl	800434e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f8fe 	bl	8004362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b04      	cmp	r3, #4
 8004178:	d122      	bne.n	80041c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d11b      	bne.n	80041c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0204 	mvn.w	r2, #4
 8004190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fc fcea 	bl	8000b80 <HAL_TIM_IC_CaptureCallback>
 80041ac:	e005      	b.n	80041ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f8cd 	bl	800434e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f8d4 	bl	8004362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d122      	bne.n	8004214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d11b      	bne.n	8004214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f06f 0208 	mvn.w	r2, #8
 80041e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2204      	movs	r2, #4
 80041ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fc fcc0 	bl	8000b80 <HAL_TIM_IC_CaptureCallback>
 8004200:	e005      	b.n	800420e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f8a3 	bl	800434e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f8aa 	bl	8004362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b10      	cmp	r3, #16
 8004220:	d122      	bne.n	8004268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b10      	cmp	r3, #16
 800422e:	d11b      	bne.n	8004268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0210 	mvn.w	r2, #16
 8004238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2208      	movs	r2, #8
 800423e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fc fc96 	bl	8000b80 <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f879 	bl	800434e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f880 	bl	8004362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b01      	cmp	r3, #1
 8004274:	d10e      	bne.n	8004294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b01      	cmp	r3, #1
 8004282:	d107      	bne.n	8004294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f06f 0201 	mvn.w	r2, #1
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fc fc46 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429e:	2b80      	cmp	r3, #128	; 0x80
 80042a0:	d10e      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ac:	2b80      	cmp	r3, #128	; 0x80
 80042ae:	d107      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f9b8 	bl	8004630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ce:	d10e      	bne.n	80042ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	2b80      	cmp	r3, #128	; 0x80
 80042dc:	d107      	bne.n	80042ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f9ab 	bl	8004644 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f8:	2b40      	cmp	r3, #64	; 0x40
 80042fa:	d10e      	bne.n	800431a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d107      	bne.n	800431a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f82e 	bl	8004376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b20      	cmp	r3, #32
 8004326:	d10e      	bne.n	8004346 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b20      	cmp	r3, #32
 8004334:	d107      	bne.n	8004346 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f06f 0220 	mvn.w	r2, #32
 800433e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f96b 	bl	800461c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a40      	ldr	r2, [pc, #256]	; (80044a0 <TIM_Base_SetConfig+0x114>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d013      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043aa:	d00f      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3d      	ldr	r2, [pc, #244]	; (80044a4 <TIM_Base_SetConfig+0x118>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00b      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a3c      	ldr	r2, [pc, #240]	; (80044a8 <TIM_Base_SetConfig+0x11c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d007      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a3b      	ldr	r2, [pc, #236]	; (80044ac <TIM_Base_SetConfig+0x120>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a3a      	ldr	r2, [pc, #232]	; (80044b0 <TIM_Base_SetConfig+0x124>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d108      	bne.n	80043de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a2f      	ldr	r2, [pc, #188]	; (80044a0 <TIM_Base_SetConfig+0x114>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01f      	beq.n	8004426 <TIM_Base_SetConfig+0x9a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ec:	d01b      	beq.n	8004426 <TIM_Base_SetConfig+0x9a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a2c      	ldr	r2, [pc, #176]	; (80044a4 <TIM_Base_SetConfig+0x118>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d017      	beq.n	8004426 <TIM_Base_SetConfig+0x9a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2b      	ldr	r2, [pc, #172]	; (80044a8 <TIM_Base_SetConfig+0x11c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <TIM_Base_SetConfig+0x9a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a2a      	ldr	r2, [pc, #168]	; (80044ac <TIM_Base_SetConfig+0x120>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00f      	beq.n	8004426 <TIM_Base_SetConfig+0x9a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <TIM_Base_SetConfig+0x124>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00b      	beq.n	8004426 <TIM_Base_SetConfig+0x9a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a28      	ldr	r2, [pc, #160]	; (80044b4 <TIM_Base_SetConfig+0x128>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <TIM_Base_SetConfig+0x9a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a27      	ldr	r2, [pc, #156]	; (80044b8 <TIM_Base_SetConfig+0x12c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_Base_SetConfig+0x9a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a26      	ldr	r2, [pc, #152]	; (80044bc <TIM_Base_SetConfig+0x130>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d108      	bne.n	8004438 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a10      	ldr	r2, [pc, #64]	; (80044a0 <TIM_Base_SetConfig+0x114>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00f      	beq.n	8004484 <TIM_Base_SetConfig+0xf8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <TIM_Base_SetConfig+0x124>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00b      	beq.n	8004484 <TIM_Base_SetConfig+0xf8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a11      	ldr	r2, [pc, #68]	; (80044b4 <TIM_Base_SetConfig+0x128>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d007      	beq.n	8004484 <TIM_Base_SetConfig+0xf8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a10      	ldr	r2, [pc, #64]	; (80044b8 <TIM_Base_SetConfig+0x12c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_Base_SetConfig+0xf8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a0f      	ldr	r2, [pc, #60]	; (80044bc <TIM_Base_SetConfig+0x130>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d103      	bne.n	800448c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	615a      	str	r2, [r3, #20]
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800
 80044ac:	40000c00 	.word	0x40000c00
 80044b0:	40013400 	.word	0x40013400
 80044b4:	40014000 	.word	0x40014000
 80044b8:	40014400 	.word	0x40014400
 80044bc:	40014800 	.word	0x40014800

080044c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	2201      	movs	r2, #1
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a1a      	ldr	r2, [r3, #32]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	43db      	mvns	r3, r3
 80044e2:	401a      	ands	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a1a      	ldr	r2, [r3, #32]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	fa01 f303 	lsl.w	r3, r1, r3
 80044f8:	431a      	orrs	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004520:	2302      	movs	r3, #2
 8004522:	e068      	b.n	80045f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a2e      	ldr	r2, [pc, #184]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d004      	beq.n	8004558 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a2d      	ldr	r2, [pc, #180]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d108      	bne.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800455e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004570:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d01d      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004596:	d018      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1b      	ldr	r2, [pc, #108]	; (800460c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a1a      	ldr	r2, [pc, #104]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00e      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a18      	ldr	r2, [pc, #96]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d009      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a13      	ldr	r2, [pc, #76]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d004      	beq.n	80045ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a14      	ldr	r2, [pc, #80]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d10c      	bne.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40013400 	.word	0x40013400
 800460c:	40000400 	.word	0x40000400
 8004610:	40000800 	.word	0x40000800
 8004614:	40000c00 	.word	0x40000c00
 8004618:	40014000 	.word	0x40014000

0800461c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e040      	b.n	80046ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7fc fb6a 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2224      	movs	r2, #36	; 0x24
 8004684:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f8c0 	bl	800481c <UART_SetConfig>
 800469c:	4603      	mov	r3, r0
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e022      	b.n	80046ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fb6c 	bl	8004d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fbf3 	bl	8004ed0 <UART_CheckIdleState>
 80046ea:	4603      	mov	r3, r0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	; 0x28
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004708:	2b20      	cmp	r3, #32
 800470a:	f040 8082 	bne.w	8004812 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_UART_Transmit+0x26>
 8004714:	88fb      	ldrh	r3, [r7, #6]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e07a      	b.n	8004814 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_UART_Transmit+0x38>
 8004728:	2302      	movs	r3, #2
 800472a:	e073      	b.n	8004814 <HAL_UART_Transmit+0x120>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2221      	movs	r2, #33	; 0x21
 8004740:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004742:	f7fc fd0d 	bl	8001160 <HAL_GetTick>
 8004746:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	88fa      	ldrh	r2, [r7, #6]
 800474c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004760:	d108      	bne.n	8004774 <HAL_UART_Transmit+0x80>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d104      	bne.n	8004774 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	e003      	b.n	800477c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004778:	2300      	movs	r3, #0
 800477a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004784:	e02d      	b.n	80047e2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2200      	movs	r2, #0
 800478e:	2180      	movs	r1, #128	; 0x80
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 fbe6 	bl	8004f62 <UART_WaitOnFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e039      	b.n	8004814 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10b      	bne.n	80047be <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	881a      	ldrh	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b2:	b292      	uxth	r2, r2
 80047b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	3302      	adds	r3, #2
 80047ba:	61bb      	str	r3, [r7, #24]
 80047bc:	e008      	b.n	80047d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	781a      	ldrb	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	b292      	uxth	r2, r2
 80047c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	3301      	adds	r3, #1
 80047ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1cb      	bne.n	8004786 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2200      	movs	r2, #0
 80047f6:	2140      	movs	r1, #64	; 0x40
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fbb2 	bl	8004f62 <UART_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e005      	b.n	8004814 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3720      	adds	r7, #32
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800481c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004820:	b08a      	sub	sp, #40	; 0x28
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	431a      	orrs	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	431a      	orrs	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	4313      	orrs	r3, r2
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4ba4      	ldr	r3, [pc, #656]	; (8004adc <UART_SetConfig+0x2c0>)
 800484c:	4013      	ands	r3, r2
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004854:	430b      	orrs	r3, r1
 8004856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a99      	ldr	r2, [pc, #612]	; (8004ae0 <UART_SetConfig+0x2c4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d004      	beq.n	8004888 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004884:	4313      	orrs	r3, r2
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004898:	430a      	orrs	r2, r1
 800489a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a90      	ldr	r2, [pc, #576]	; (8004ae4 <UART_SetConfig+0x2c8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d126      	bne.n	80048f4 <UART_SetConfig+0xd8>
 80048a6:	4b90      	ldr	r3, [pc, #576]	; (8004ae8 <UART_SetConfig+0x2cc>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d81b      	bhi.n	80048ec <UART_SetConfig+0xd0>
 80048b4:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <UART_SetConfig+0xa0>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048dd 	.word	0x080048dd
 80048c4:	080048d5 	.word	0x080048d5
 80048c8:	080048e5 	.word	0x080048e5
 80048cc:	2301      	movs	r3, #1
 80048ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d2:	e116      	b.n	8004b02 <UART_SetConfig+0x2e6>
 80048d4:	2302      	movs	r3, #2
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048da:	e112      	b.n	8004b02 <UART_SetConfig+0x2e6>
 80048dc:	2304      	movs	r3, #4
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e2:	e10e      	b.n	8004b02 <UART_SetConfig+0x2e6>
 80048e4:	2308      	movs	r3, #8
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ea:	e10a      	b.n	8004b02 <UART_SetConfig+0x2e6>
 80048ec:	2310      	movs	r3, #16
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f2:	e106      	b.n	8004b02 <UART_SetConfig+0x2e6>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a7c      	ldr	r2, [pc, #496]	; (8004aec <UART_SetConfig+0x2d0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d138      	bne.n	8004970 <UART_SetConfig+0x154>
 80048fe:	4b7a      	ldr	r3, [pc, #488]	; (8004ae8 <UART_SetConfig+0x2cc>)
 8004900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004904:	f003 030c 	and.w	r3, r3, #12
 8004908:	2b0c      	cmp	r3, #12
 800490a:	d82d      	bhi.n	8004968 <UART_SetConfig+0x14c>
 800490c:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <UART_SetConfig+0xf8>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004949 	.word	0x08004949
 8004918:	08004969 	.word	0x08004969
 800491c:	08004969 	.word	0x08004969
 8004920:	08004969 	.word	0x08004969
 8004924:	08004959 	.word	0x08004959
 8004928:	08004969 	.word	0x08004969
 800492c:	08004969 	.word	0x08004969
 8004930:	08004969 	.word	0x08004969
 8004934:	08004951 	.word	0x08004951
 8004938:	08004969 	.word	0x08004969
 800493c:	08004969 	.word	0x08004969
 8004940:	08004969 	.word	0x08004969
 8004944:	08004961 	.word	0x08004961
 8004948:	2300      	movs	r3, #0
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494e:	e0d8      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004950:	2302      	movs	r3, #2
 8004952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004956:	e0d4      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004958:	2304      	movs	r3, #4
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495e:	e0d0      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004960:	2308      	movs	r3, #8
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004966:	e0cc      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004968:	2310      	movs	r3, #16
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496e:	e0c8      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a5e      	ldr	r2, [pc, #376]	; (8004af0 <UART_SetConfig+0x2d4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d125      	bne.n	80049c6 <UART_SetConfig+0x1aa>
 800497a:	4b5b      	ldr	r3, [pc, #364]	; (8004ae8 <UART_SetConfig+0x2cc>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004980:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004984:	2b30      	cmp	r3, #48	; 0x30
 8004986:	d016      	beq.n	80049b6 <UART_SetConfig+0x19a>
 8004988:	2b30      	cmp	r3, #48	; 0x30
 800498a:	d818      	bhi.n	80049be <UART_SetConfig+0x1a2>
 800498c:	2b20      	cmp	r3, #32
 800498e:	d00a      	beq.n	80049a6 <UART_SetConfig+0x18a>
 8004990:	2b20      	cmp	r3, #32
 8004992:	d814      	bhi.n	80049be <UART_SetConfig+0x1a2>
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <UART_SetConfig+0x182>
 8004998:	2b10      	cmp	r3, #16
 800499a:	d008      	beq.n	80049ae <UART_SetConfig+0x192>
 800499c:	e00f      	b.n	80049be <UART_SetConfig+0x1a2>
 800499e:	2300      	movs	r3, #0
 80049a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049a4:	e0ad      	b.n	8004b02 <UART_SetConfig+0x2e6>
 80049a6:	2302      	movs	r3, #2
 80049a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ac:	e0a9      	b.n	8004b02 <UART_SetConfig+0x2e6>
 80049ae:	2304      	movs	r3, #4
 80049b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b4:	e0a5      	b.n	8004b02 <UART_SetConfig+0x2e6>
 80049b6:	2308      	movs	r3, #8
 80049b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049bc:	e0a1      	b.n	8004b02 <UART_SetConfig+0x2e6>
 80049be:	2310      	movs	r3, #16
 80049c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c4:	e09d      	b.n	8004b02 <UART_SetConfig+0x2e6>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a4a      	ldr	r2, [pc, #296]	; (8004af4 <UART_SetConfig+0x2d8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d125      	bne.n	8004a1c <UART_SetConfig+0x200>
 80049d0:	4b45      	ldr	r3, [pc, #276]	; (8004ae8 <UART_SetConfig+0x2cc>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049da:	2bc0      	cmp	r3, #192	; 0xc0
 80049dc:	d016      	beq.n	8004a0c <UART_SetConfig+0x1f0>
 80049de:	2bc0      	cmp	r3, #192	; 0xc0
 80049e0:	d818      	bhi.n	8004a14 <UART_SetConfig+0x1f8>
 80049e2:	2b80      	cmp	r3, #128	; 0x80
 80049e4:	d00a      	beq.n	80049fc <UART_SetConfig+0x1e0>
 80049e6:	2b80      	cmp	r3, #128	; 0x80
 80049e8:	d814      	bhi.n	8004a14 <UART_SetConfig+0x1f8>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <UART_SetConfig+0x1d8>
 80049ee:	2b40      	cmp	r3, #64	; 0x40
 80049f0:	d008      	beq.n	8004a04 <UART_SetConfig+0x1e8>
 80049f2:	e00f      	b.n	8004a14 <UART_SetConfig+0x1f8>
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049fa:	e082      	b.n	8004b02 <UART_SetConfig+0x2e6>
 80049fc:	2302      	movs	r3, #2
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a02:	e07e      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004a04:	2304      	movs	r3, #4
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0a:	e07a      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e076      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004a14:	2310      	movs	r3, #16
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e072      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a35      	ldr	r2, [pc, #212]	; (8004af8 <UART_SetConfig+0x2dc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d12a      	bne.n	8004a7c <UART_SetConfig+0x260>
 8004a26:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <UART_SetConfig+0x2cc>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a34:	d01a      	beq.n	8004a6c <UART_SetConfig+0x250>
 8004a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a3a:	d81b      	bhi.n	8004a74 <UART_SetConfig+0x258>
 8004a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a40:	d00c      	beq.n	8004a5c <UART_SetConfig+0x240>
 8004a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a46:	d815      	bhi.n	8004a74 <UART_SetConfig+0x258>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <UART_SetConfig+0x238>
 8004a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a50:	d008      	beq.n	8004a64 <UART_SetConfig+0x248>
 8004a52:	e00f      	b.n	8004a74 <UART_SetConfig+0x258>
 8004a54:	2300      	movs	r3, #0
 8004a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a5a:	e052      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a62:	e04e      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004a64:	2304      	movs	r3, #4
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a6a:	e04a      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a72:	e046      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004a74:	2310      	movs	r3, #16
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7a:	e042      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a17      	ldr	r2, [pc, #92]	; (8004ae0 <UART_SetConfig+0x2c4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d13a      	bne.n	8004afc <UART_SetConfig+0x2e0>
 8004a86:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <UART_SetConfig+0x2cc>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a94:	d01a      	beq.n	8004acc <UART_SetConfig+0x2b0>
 8004a96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a9a:	d81b      	bhi.n	8004ad4 <UART_SetConfig+0x2b8>
 8004a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa0:	d00c      	beq.n	8004abc <UART_SetConfig+0x2a0>
 8004aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa6:	d815      	bhi.n	8004ad4 <UART_SetConfig+0x2b8>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <UART_SetConfig+0x298>
 8004aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab0:	d008      	beq.n	8004ac4 <UART_SetConfig+0x2a8>
 8004ab2:	e00f      	b.n	8004ad4 <UART_SetConfig+0x2b8>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aba:	e022      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004abc:	2302      	movs	r3, #2
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac2:	e01e      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aca:	e01a      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004acc:	2308      	movs	r3, #8
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e016      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004ad4:	2310      	movs	r3, #16
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e012      	b.n	8004b02 <UART_SetConfig+0x2e6>
 8004adc:	efff69f3 	.word	0xefff69f3
 8004ae0:	40008000 	.word	0x40008000
 8004ae4:	40013800 	.word	0x40013800
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40004400 	.word	0x40004400
 8004af0:	40004800 	.word	0x40004800
 8004af4:	40004c00 	.word	0x40004c00
 8004af8:	40005000 	.word	0x40005000
 8004afc:	2310      	movs	r3, #16
 8004afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a9f      	ldr	r2, [pc, #636]	; (8004d84 <UART_SetConfig+0x568>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d17a      	bne.n	8004c02 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d824      	bhi.n	8004b5e <UART_SetConfig+0x342>
 8004b14:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <UART_SetConfig+0x300>)
 8004b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1a:	bf00      	nop
 8004b1c:	08004b41 	.word	0x08004b41
 8004b20:	08004b5f 	.word	0x08004b5f
 8004b24:	08004b49 	.word	0x08004b49
 8004b28:	08004b5f 	.word	0x08004b5f
 8004b2c:	08004b4f 	.word	0x08004b4f
 8004b30:	08004b5f 	.word	0x08004b5f
 8004b34:	08004b5f 	.word	0x08004b5f
 8004b38:	08004b5f 	.word	0x08004b5f
 8004b3c:	08004b57 	.word	0x08004b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b40:	f7fe fb92 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8004b44:	61f8      	str	r0, [r7, #28]
        break;
 8004b46:	e010      	b.n	8004b6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b48:	4b8f      	ldr	r3, [pc, #572]	; (8004d88 <UART_SetConfig+0x56c>)
 8004b4a:	61fb      	str	r3, [r7, #28]
        break;
 8004b4c:	e00d      	b.n	8004b6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4e:	f7fe faf3 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 8004b52:	61f8      	str	r0, [r7, #28]
        break;
 8004b54:	e009      	b.n	8004b6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b5a:	61fb      	str	r3, [r7, #28]
        break;
 8004b5c:	e005      	b.n	8004b6a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80fb 	beq.w	8004d68 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	4413      	add	r3, r2
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d305      	bcc.n	8004b8e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b88:	69fa      	ldr	r2, [r7, #28]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d903      	bls.n	8004b96 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b94:	e0e8      	b.n	8004d68 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	461c      	mov	r4, r3
 8004b9c:	4615      	mov	r5, r2
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	022b      	lsls	r3, r5, #8
 8004ba8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004bac:	0222      	lsls	r2, r4, #8
 8004bae:	68f9      	ldr	r1, [r7, #12]
 8004bb0:	6849      	ldr	r1, [r1, #4]
 8004bb2:	0849      	lsrs	r1, r1, #1
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	4688      	mov	r8, r1
 8004bb8:	4681      	mov	r9, r0
 8004bba:	eb12 0a08 	adds.w	sl, r2, r8
 8004bbe:	eb43 0b09 	adc.w	fp, r3, r9
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bd0:	4650      	mov	r0, sl
 8004bd2:	4659      	mov	r1, fp
 8004bd4:	f7fb fb4c 	bl	8000270 <__aeabi_uldivmod>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4613      	mov	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004be6:	d308      	bcc.n	8004bfa <UART_SetConfig+0x3de>
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bee:	d204      	bcs.n	8004bfa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	60da      	str	r2, [r3, #12]
 8004bf8:	e0b6      	b.n	8004d68 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c00:	e0b2      	b.n	8004d68 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0a:	d15e      	bne.n	8004cca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d828      	bhi.n	8004c66 <UART_SetConfig+0x44a>
 8004c14:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <UART_SetConfig+0x400>)
 8004c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1a:	bf00      	nop
 8004c1c:	08004c41 	.word	0x08004c41
 8004c20:	08004c49 	.word	0x08004c49
 8004c24:	08004c51 	.word	0x08004c51
 8004c28:	08004c67 	.word	0x08004c67
 8004c2c:	08004c57 	.word	0x08004c57
 8004c30:	08004c67 	.word	0x08004c67
 8004c34:	08004c67 	.word	0x08004c67
 8004c38:	08004c67 	.word	0x08004c67
 8004c3c:	08004c5f 	.word	0x08004c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c40:	f7fe fb12 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8004c44:	61f8      	str	r0, [r7, #28]
        break;
 8004c46:	e014      	b.n	8004c72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c48:	f7fe fb24 	bl	8003294 <HAL_RCC_GetPCLK2Freq>
 8004c4c:	61f8      	str	r0, [r7, #28]
        break;
 8004c4e:	e010      	b.n	8004c72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c50:	4b4d      	ldr	r3, [pc, #308]	; (8004d88 <UART_SetConfig+0x56c>)
 8004c52:	61fb      	str	r3, [r7, #28]
        break;
 8004c54:	e00d      	b.n	8004c72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c56:	f7fe fa6f 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 8004c5a:	61f8      	str	r0, [r7, #28]
        break;
 8004c5c:	e009      	b.n	8004c72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c62:	61fb      	str	r3, [r7, #28]
        break;
 8004c64:	e005      	b.n	8004c72 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d077      	beq.n	8004d68 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	005a      	lsls	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	441a      	add	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b0f      	cmp	r3, #15
 8004c92:	d916      	bls.n	8004cc2 <UART_SetConfig+0x4a6>
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9a:	d212      	bcs.n	8004cc2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f023 030f 	bic.w	r3, r3, #15
 8004ca4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	085b      	lsrs	r3, r3, #1
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	8afb      	ldrh	r3, [r7, #22]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	8afa      	ldrh	r2, [r7, #22]
 8004cbe:	60da      	str	r2, [r3, #12]
 8004cc0:	e052      	b.n	8004d68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cc8:	e04e      	b.n	8004d68 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d827      	bhi.n	8004d22 <UART_SetConfig+0x506>
 8004cd2:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <UART_SetConfig+0x4bc>)
 8004cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd8:	08004cfd 	.word	0x08004cfd
 8004cdc:	08004d05 	.word	0x08004d05
 8004ce0:	08004d0d 	.word	0x08004d0d
 8004ce4:	08004d23 	.word	0x08004d23
 8004ce8:	08004d13 	.word	0x08004d13
 8004cec:	08004d23 	.word	0x08004d23
 8004cf0:	08004d23 	.word	0x08004d23
 8004cf4:	08004d23 	.word	0x08004d23
 8004cf8:	08004d1b 	.word	0x08004d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cfc:	f7fe fab4 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8004d00:	61f8      	str	r0, [r7, #28]
        break;
 8004d02:	e014      	b.n	8004d2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d04:	f7fe fac6 	bl	8003294 <HAL_RCC_GetPCLK2Freq>
 8004d08:	61f8      	str	r0, [r7, #28]
        break;
 8004d0a:	e010      	b.n	8004d2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d0c:	4b1e      	ldr	r3, [pc, #120]	; (8004d88 <UART_SetConfig+0x56c>)
 8004d0e:	61fb      	str	r3, [r7, #28]
        break;
 8004d10:	e00d      	b.n	8004d2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d12:	f7fe fa11 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 8004d16:	61f8      	str	r0, [r7, #28]
        break;
 8004d18:	e009      	b.n	8004d2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d1e:	61fb      	str	r3, [r7, #28]
        break;
 8004d20:	e005      	b.n	8004d2e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d2c:	bf00      	nop
    }

    if (pclk != 0U)
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d019      	beq.n	8004d68 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	085a      	lsrs	r2, r3, #1
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	441a      	add	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	2b0f      	cmp	r3, #15
 8004d4c:	d909      	bls.n	8004d62 <UART_SetConfig+0x546>
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d54:	d205      	bcs.n	8004d62 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60da      	str	r2, [r3, #12]
 8004d60:	e002      	b.n	8004d68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3728      	adds	r7, #40	; 0x28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d82:	bf00      	nop
 8004d84:	40008000 	.word	0x40008000
 8004d88:	00f42400 	.word	0x00f42400

08004d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01a      	beq.n	8004ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8a:	d10a      	bne.n	8004ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ee0:	f7fc f93e 	bl	8001160 <HAL_GetTick>
 8004ee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d10e      	bne.n	8004f12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f82d 	bl	8004f62 <UART_WaitOnFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e023      	b.n	8004f5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d10e      	bne.n	8004f3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f817 	bl	8004f62 <UART_WaitOnFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e00d      	b.n	8004f5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b09c      	sub	sp, #112	; 0x70
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	60f8      	str	r0, [r7, #12]
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f72:	e0a5      	b.n	80050c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7a:	f000 80a1 	beq.w	80050c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7e:	f7fc f8ef 	bl	8001160 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d302      	bcc.n	8004f94 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d13e      	bne.n	8005012 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fb4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e6      	bne.n	8004f94 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	663b      	str	r3, [r7, #96]	; 0x60
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fe6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004fe8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e5      	bne.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e067      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d04f      	beq.n	80050c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800502a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800502e:	d147      	bne.n	80050c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005038:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	e853 3f00 	ldrex	r3, [r3]
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800504e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005058:	637b      	str	r3, [r7, #52]	; 0x34
 800505a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800505e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e6      	bne.n	800503a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3308      	adds	r3, #8
 8005072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	613b      	str	r3, [r7, #16]
   return(result);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	66bb      	str	r3, [r7, #104]	; 0x68
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3308      	adds	r3, #8
 800508a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800508c:	623a      	str	r2, [r7, #32]
 800508e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	69f9      	ldr	r1, [r7, #28]
 8005092:	6a3a      	ldr	r2, [r7, #32]
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	61bb      	str	r3, [r7, #24]
   return(result);
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e5      	bne.n	800506c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e010      	b.n	80050e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	69da      	ldr	r2, [r3, #28]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4013      	ands	r3, r2
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	bf0c      	ite	eq
 80050d0:	2301      	moveq	r3, #1
 80050d2:	2300      	movne	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	461a      	mov	r2, r3
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	429a      	cmp	r2, r3
 80050dc:	f43f af4a 	beq.w	8004f74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3770      	adds	r7, #112	; 0x70
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050ea:	b084      	sub	sp, #16
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	f107 001c 	add.w	r0, r7, #28
 80050f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fa6f 	bl	80055ec <USB_CoreReset>
 800510e:	4603      	mov	r3, r0
 8005110:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	639a      	str	r2, [r3, #56]	; 0x38
 8005124:	e005      	b.n	8005132 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005132:	7bfb      	ldrb	r3, [r7, #15]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800513e:	b004      	add	sp, #16
 8005140:	4770      	bx	lr

08005142 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f023 0201 	bic.w	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d115      	bne.n	80051b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005192:	2001      	movs	r0, #1
 8005194:	f7fb fff0 	bl	8001178 <HAL_Delay>
      ms++;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3301      	adds	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fa16 	bl	80055d0 <USB_GetMode>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d01e      	beq.n	80051e8 <USB_SetCurrentMode+0x84>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b31      	cmp	r3, #49	; 0x31
 80051ae:	d9f0      	bls.n	8005192 <USB_SetCurrentMode+0x2e>
 80051b0:	e01a      	b.n	80051e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051b2:	78fb      	ldrb	r3, [r7, #3]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d115      	bne.n	80051e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051c4:	2001      	movs	r0, #1
 80051c6:	f7fb ffd7 	bl	8001178 <HAL_Delay>
      ms++;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3301      	adds	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f9fd 	bl	80055d0 <USB_GetMode>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <USB_SetCurrentMode+0x84>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b31      	cmp	r3, #49	; 0x31
 80051e0:	d9f0      	bls.n	80051c4 <USB_SetCurrentMode+0x60>
 80051e2:	e001      	b.n	80051e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e005      	b.n	80051f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b32      	cmp	r3, #50	; 0x32
 80051ec:	d101      	bne.n	80051f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051fc:	b084      	sub	sp, #16
 80051fe:	b580      	push	{r7, lr}
 8005200:	b086      	sub	sp, #24
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800520a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005216:	2300      	movs	r3, #0
 8005218:	613b      	str	r3, [r7, #16]
 800521a:	e009      	b.n	8005230 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	3340      	adds	r3, #64	; 0x40
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	2200      	movs	r2, #0
 8005228:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	3301      	adds	r3, #1
 800522e:	613b      	str	r3, [r7, #16]
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b0e      	cmp	r3, #14
 8005234:	d9f2      	bls.n	800521c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d11c      	bne.n	8005276 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800524a:	f043 0302 	orr.w	r3, r3, #2
 800524e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e005      	b.n	8005282 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005288:	461a      	mov	r2, r3
 800528a:	2300      	movs	r3, #0
 800528c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005294:	4619      	mov	r1, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529c:	461a      	mov	r2, r3
 800529e:	680b      	ldr	r3, [r1, #0]
 80052a0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052a2:	2103      	movs	r1, #3
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f959 	bl	800555c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052aa:	2110      	movs	r1, #16
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f8f1 	bl	8005494 <USB_FlushTxFifo>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f91d 	bl	80054fc <USB_FlushRxFifo>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d2:	461a      	mov	r2, r3
 80052d4:	2300      	movs	r3, #0
 80052d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052de:	461a      	mov	r2, r3
 80052e0:	2300      	movs	r3, #0
 80052e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ea:	461a      	mov	r2, r3
 80052ec:	2300      	movs	r3, #0
 80052ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052f0:	2300      	movs	r3, #0
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	e043      	b.n	800537e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800530c:	d118      	bne.n	8005340 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005320:	461a      	mov	r2, r3
 8005322:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	e013      	b.n	8005352 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005336:	461a      	mov	r2, r3
 8005338:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	e008      	b.n	8005352 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	461a      	mov	r2, r3
 800534e:	2300      	movs	r3, #0
 8005350:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535e:	461a      	mov	r2, r3
 8005360:	2300      	movs	r3, #0
 8005362:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	461a      	mov	r2, r3
 8005372:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005376:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	3301      	adds	r3, #1
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	429a      	cmp	r2, r3
 8005384:	d3b7      	bcc.n	80052f6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	e043      	b.n	8005414 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800539e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053a2:	d118      	bne.n	80053d6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b6:	461a      	mov	r2, r3
 80053b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	e013      	b.n	80053e8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053cc:	461a      	mov	r2, r3
 80053ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	e008      	b.n	80053e8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e2:	461a      	mov	r2, r3
 80053e4:	2300      	movs	r3, #0
 80053e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f4:	461a      	mov	r2, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005406:	461a      	mov	r2, r3
 8005408:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800540c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	3301      	adds	r3, #1
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	429a      	cmp	r2, r3
 800541a:	d3b7      	bcc.n	800538c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800542a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800542e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800543c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f043 0210 	orr.w	r2, r3, #16
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	4b10      	ldr	r3, [pc, #64]	; (8005490 <USB_DevInit+0x294>)
 8005450:	4313      	orrs	r3, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f043 0208 	orr.w	r2, r3, #8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546a:	2b01      	cmp	r3, #1
 800546c:	d107      	bne.n	800547e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005476:	f043 0304 	orr.w	r3, r3, #4
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800548a:	b004      	add	sp, #16
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	803c3800 	.word	0x803c3800

08005494 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3301      	adds	r3, #1
 80054a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4a13      	ldr	r2, [pc, #76]	; (80054f8 <USB_FlushTxFifo+0x64>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d901      	bls.n	80054b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e01b      	b.n	80054ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	daf2      	bge.n	80054a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	019b      	lsls	r3, r3, #6
 80054c4:	f043 0220 	orr.w	r2, r3, #32
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3301      	adds	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <USB_FlushTxFifo+0x64>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d901      	bls.n	80054de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e006      	b.n	80054ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d0f0      	beq.n	80054cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	00030d40 	.word	0x00030d40

080054fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3301      	adds	r3, #1
 800550c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	4a11      	ldr	r2, [pc, #68]	; (8005558 <USB_FlushRxFifo+0x5c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d901      	bls.n	800551a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e018      	b.n	800554c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	daf2      	bge.n	8005508 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2210      	movs	r2, #16
 800552a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3301      	adds	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4a08      	ldr	r2, [pc, #32]	; (8005558 <USB_FlushRxFifo+0x5c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e006      	b.n	800554c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b10      	cmp	r3, #16
 8005548:	d0f0      	beq.n	800552c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	00030d40 	.word	0x00030d40

0800555c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	68f9      	ldr	r1, [r7, #12]
 8005578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800557c:	4313      	orrs	r3, r2
 800557e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055a8:	f023 0303 	bic.w	r3, r3, #3
 80055ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055bc:	f043 0302 	orr.w	r3, r3, #2
 80055c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f003 0301 	and.w	r3, r3, #1
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4a13      	ldr	r2, [pc, #76]	; (8005650 <USB_CoreReset+0x64>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e01b      	b.n	8005642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	daf2      	bge.n	80055f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f043 0201 	orr.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3301      	adds	r3, #1
 8005626:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4a09      	ldr	r2, [pc, #36]	; (8005650 <USB_CoreReset+0x64>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e006      	b.n	8005642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b01      	cmp	r3, #1
 800563e:	d0f0      	beq.n	8005622 <USB_CoreReset+0x36>

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	00030d40 	.word	0x00030d40

08005654 <__errno>:
 8005654:	4b01      	ldr	r3, [pc, #4]	; (800565c <__errno+0x8>)
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	2000000c 	.word	0x2000000c

08005660 <__libc_init_array>:
 8005660:	b570      	push	{r4, r5, r6, lr}
 8005662:	4d0d      	ldr	r5, [pc, #52]	; (8005698 <__libc_init_array+0x38>)
 8005664:	4c0d      	ldr	r4, [pc, #52]	; (800569c <__libc_init_array+0x3c>)
 8005666:	1b64      	subs	r4, r4, r5
 8005668:	10a4      	asrs	r4, r4, #2
 800566a:	2600      	movs	r6, #0
 800566c:	42a6      	cmp	r6, r4
 800566e:	d109      	bne.n	8005684 <__libc_init_array+0x24>
 8005670:	4d0b      	ldr	r5, [pc, #44]	; (80056a0 <__libc_init_array+0x40>)
 8005672:	4c0c      	ldr	r4, [pc, #48]	; (80056a4 <__libc_init_array+0x44>)
 8005674:	f000 fc8e 	bl	8005f94 <_init>
 8005678:	1b64      	subs	r4, r4, r5
 800567a:	10a4      	asrs	r4, r4, #2
 800567c:	2600      	movs	r6, #0
 800567e:	42a6      	cmp	r6, r4
 8005680:	d105      	bne.n	800568e <__libc_init_array+0x2e>
 8005682:	bd70      	pop	{r4, r5, r6, pc}
 8005684:	f855 3b04 	ldr.w	r3, [r5], #4
 8005688:	4798      	blx	r3
 800568a:	3601      	adds	r6, #1
 800568c:	e7ee      	b.n	800566c <__libc_init_array+0xc>
 800568e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005692:	4798      	blx	r3
 8005694:	3601      	adds	r6, #1
 8005696:	e7f2      	b.n	800567e <__libc_init_array+0x1e>
 8005698:	080060a0 	.word	0x080060a0
 800569c:	080060a0 	.word	0x080060a0
 80056a0:	080060a0 	.word	0x080060a0
 80056a4:	080060a4 	.word	0x080060a4

080056a8 <memset>:
 80056a8:	4402      	add	r2, r0
 80056aa:	4603      	mov	r3, r0
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d100      	bne.n	80056b2 <memset+0xa>
 80056b0:	4770      	bx	lr
 80056b2:	f803 1b01 	strb.w	r1, [r3], #1
 80056b6:	e7f9      	b.n	80056ac <memset+0x4>

080056b8 <siprintf>:
 80056b8:	b40e      	push	{r1, r2, r3}
 80056ba:	b500      	push	{lr}
 80056bc:	b09c      	sub	sp, #112	; 0x70
 80056be:	ab1d      	add	r3, sp, #116	; 0x74
 80056c0:	9002      	str	r0, [sp, #8]
 80056c2:	9006      	str	r0, [sp, #24]
 80056c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056c8:	4809      	ldr	r0, [pc, #36]	; (80056f0 <siprintf+0x38>)
 80056ca:	9107      	str	r1, [sp, #28]
 80056cc:	9104      	str	r1, [sp, #16]
 80056ce:	4909      	ldr	r1, [pc, #36]	; (80056f4 <siprintf+0x3c>)
 80056d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80056d4:	9105      	str	r1, [sp, #20]
 80056d6:	6800      	ldr	r0, [r0, #0]
 80056d8:	9301      	str	r3, [sp, #4]
 80056da:	a902      	add	r1, sp, #8
 80056dc:	f000 f868 	bl	80057b0 <_svfiprintf_r>
 80056e0:	9b02      	ldr	r3, [sp, #8]
 80056e2:	2200      	movs	r2, #0
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	b01c      	add	sp, #112	; 0x70
 80056e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80056ec:	b003      	add	sp, #12
 80056ee:	4770      	bx	lr
 80056f0:	2000000c 	.word	0x2000000c
 80056f4:	ffff0208 	.word	0xffff0208

080056f8 <__ssputs_r>:
 80056f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056fc:	688e      	ldr	r6, [r1, #8]
 80056fe:	429e      	cmp	r6, r3
 8005700:	4682      	mov	sl, r0
 8005702:	460c      	mov	r4, r1
 8005704:	4690      	mov	r8, r2
 8005706:	461f      	mov	r7, r3
 8005708:	d838      	bhi.n	800577c <__ssputs_r+0x84>
 800570a:	898a      	ldrh	r2, [r1, #12]
 800570c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005710:	d032      	beq.n	8005778 <__ssputs_r+0x80>
 8005712:	6825      	ldr	r5, [r4, #0]
 8005714:	6909      	ldr	r1, [r1, #16]
 8005716:	eba5 0901 	sub.w	r9, r5, r1
 800571a:	6965      	ldr	r5, [r4, #20]
 800571c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005720:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005724:	3301      	adds	r3, #1
 8005726:	444b      	add	r3, r9
 8005728:	106d      	asrs	r5, r5, #1
 800572a:	429d      	cmp	r5, r3
 800572c:	bf38      	it	cc
 800572e:	461d      	movcc	r5, r3
 8005730:	0553      	lsls	r3, r2, #21
 8005732:	d531      	bpl.n	8005798 <__ssputs_r+0xa0>
 8005734:	4629      	mov	r1, r5
 8005736:	f000 fb63 	bl	8005e00 <_malloc_r>
 800573a:	4606      	mov	r6, r0
 800573c:	b950      	cbnz	r0, 8005754 <__ssputs_r+0x5c>
 800573e:	230c      	movs	r3, #12
 8005740:	f8ca 3000 	str.w	r3, [sl]
 8005744:	89a3      	ldrh	r3, [r4, #12]
 8005746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800574a:	81a3      	strh	r3, [r4, #12]
 800574c:	f04f 30ff 	mov.w	r0, #4294967295
 8005750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005754:	6921      	ldr	r1, [r4, #16]
 8005756:	464a      	mov	r2, r9
 8005758:	f000 fabe 	bl	8005cd8 <memcpy>
 800575c:	89a3      	ldrh	r3, [r4, #12]
 800575e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005766:	81a3      	strh	r3, [r4, #12]
 8005768:	6126      	str	r6, [r4, #16]
 800576a:	6165      	str	r5, [r4, #20]
 800576c:	444e      	add	r6, r9
 800576e:	eba5 0509 	sub.w	r5, r5, r9
 8005772:	6026      	str	r6, [r4, #0]
 8005774:	60a5      	str	r5, [r4, #8]
 8005776:	463e      	mov	r6, r7
 8005778:	42be      	cmp	r6, r7
 800577a:	d900      	bls.n	800577e <__ssputs_r+0x86>
 800577c:	463e      	mov	r6, r7
 800577e:	6820      	ldr	r0, [r4, #0]
 8005780:	4632      	mov	r2, r6
 8005782:	4641      	mov	r1, r8
 8005784:	f000 fab6 	bl	8005cf4 <memmove>
 8005788:	68a3      	ldr	r3, [r4, #8]
 800578a:	1b9b      	subs	r3, r3, r6
 800578c:	60a3      	str	r3, [r4, #8]
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	4433      	add	r3, r6
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	2000      	movs	r0, #0
 8005796:	e7db      	b.n	8005750 <__ssputs_r+0x58>
 8005798:	462a      	mov	r2, r5
 800579a:	f000 fba5 	bl	8005ee8 <_realloc_r>
 800579e:	4606      	mov	r6, r0
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d1e1      	bne.n	8005768 <__ssputs_r+0x70>
 80057a4:	6921      	ldr	r1, [r4, #16]
 80057a6:	4650      	mov	r0, sl
 80057a8:	f000 fabe 	bl	8005d28 <_free_r>
 80057ac:	e7c7      	b.n	800573e <__ssputs_r+0x46>
	...

080057b0 <_svfiprintf_r>:
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	4698      	mov	r8, r3
 80057b6:	898b      	ldrh	r3, [r1, #12]
 80057b8:	061b      	lsls	r3, r3, #24
 80057ba:	b09d      	sub	sp, #116	; 0x74
 80057bc:	4607      	mov	r7, r0
 80057be:	460d      	mov	r5, r1
 80057c0:	4614      	mov	r4, r2
 80057c2:	d50e      	bpl.n	80057e2 <_svfiprintf_r+0x32>
 80057c4:	690b      	ldr	r3, [r1, #16]
 80057c6:	b963      	cbnz	r3, 80057e2 <_svfiprintf_r+0x32>
 80057c8:	2140      	movs	r1, #64	; 0x40
 80057ca:	f000 fb19 	bl	8005e00 <_malloc_r>
 80057ce:	6028      	str	r0, [r5, #0]
 80057d0:	6128      	str	r0, [r5, #16]
 80057d2:	b920      	cbnz	r0, 80057de <_svfiprintf_r+0x2e>
 80057d4:	230c      	movs	r3, #12
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295
 80057dc:	e0d1      	b.n	8005982 <_svfiprintf_r+0x1d2>
 80057de:	2340      	movs	r3, #64	; 0x40
 80057e0:	616b      	str	r3, [r5, #20]
 80057e2:	2300      	movs	r3, #0
 80057e4:	9309      	str	r3, [sp, #36]	; 0x24
 80057e6:	2320      	movs	r3, #32
 80057e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80057f0:	2330      	movs	r3, #48	; 0x30
 80057f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800599c <_svfiprintf_r+0x1ec>
 80057f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057fa:	f04f 0901 	mov.w	r9, #1
 80057fe:	4623      	mov	r3, r4
 8005800:	469a      	mov	sl, r3
 8005802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005806:	b10a      	cbz	r2, 800580c <_svfiprintf_r+0x5c>
 8005808:	2a25      	cmp	r2, #37	; 0x25
 800580a:	d1f9      	bne.n	8005800 <_svfiprintf_r+0x50>
 800580c:	ebba 0b04 	subs.w	fp, sl, r4
 8005810:	d00b      	beq.n	800582a <_svfiprintf_r+0x7a>
 8005812:	465b      	mov	r3, fp
 8005814:	4622      	mov	r2, r4
 8005816:	4629      	mov	r1, r5
 8005818:	4638      	mov	r0, r7
 800581a:	f7ff ff6d 	bl	80056f8 <__ssputs_r>
 800581e:	3001      	adds	r0, #1
 8005820:	f000 80aa 	beq.w	8005978 <_svfiprintf_r+0x1c8>
 8005824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005826:	445a      	add	r2, fp
 8005828:	9209      	str	r2, [sp, #36]	; 0x24
 800582a:	f89a 3000 	ldrb.w	r3, [sl]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 80a2 	beq.w	8005978 <_svfiprintf_r+0x1c8>
 8005834:	2300      	movs	r3, #0
 8005836:	f04f 32ff 	mov.w	r2, #4294967295
 800583a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800583e:	f10a 0a01 	add.w	sl, sl, #1
 8005842:	9304      	str	r3, [sp, #16]
 8005844:	9307      	str	r3, [sp, #28]
 8005846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800584a:	931a      	str	r3, [sp, #104]	; 0x68
 800584c:	4654      	mov	r4, sl
 800584e:	2205      	movs	r2, #5
 8005850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005854:	4851      	ldr	r0, [pc, #324]	; (800599c <_svfiprintf_r+0x1ec>)
 8005856:	f7fa fcbb 	bl	80001d0 <memchr>
 800585a:	9a04      	ldr	r2, [sp, #16]
 800585c:	b9d8      	cbnz	r0, 8005896 <_svfiprintf_r+0xe6>
 800585e:	06d0      	lsls	r0, r2, #27
 8005860:	bf44      	itt	mi
 8005862:	2320      	movmi	r3, #32
 8005864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005868:	0711      	lsls	r1, r2, #28
 800586a:	bf44      	itt	mi
 800586c:	232b      	movmi	r3, #43	; 0x2b
 800586e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005872:	f89a 3000 	ldrb.w	r3, [sl]
 8005876:	2b2a      	cmp	r3, #42	; 0x2a
 8005878:	d015      	beq.n	80058a6 <_svfiprintf_r+0xf6>
 800587a:	9a07      	ldr	r2, [sp, #28]
 800587c:	4654      	mov	r4, sl
 800587e:	2000      	movs	r0, #0
 8005880:	f04f 0c0a 	mov.w	ip, #10
 8005884:	4621      	mov	r1, r4
 8005886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800588a:	3b30      	subs	r3, #48	; 0x30
 800588c:	2b09      	cmp	r3, #9
 800588e:	d94e      	bls.n	800592e <_svfiprintf_r+0x17e>
 8005890:	b1b0      	cbz	r0, 80058c0 <_svfiprintf_r+0x110>
 8005892:	9207      	str	r2, [sp, #28]
 8005894:	e014      	b.n	80058c0 <_svfiprintf_r+0x110>
 8005896:	eba0 0308 	sub.w	r3, r0, r8
 800589a:	fa09 f303 	lsl.w	r3, r9, r3
 800589e:	4313      	orrs	r3, r2
 80058a0:	9304      	str	r3, [sp, #16]
 80058a2:	46a2      	mov	sl, r4
 80058a4:	e7d2      	b.n	800584c <_svfiprintf_r+0x9c>
 80058a6:	9b03      	ldr	r3, [sp, #12]
 80058a8:	1d19      	adds	r1, r3, #4
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	9103      	str	r1, [sp, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	bfbb      	ittet	lt
 80058b2:	425b      	neglt	r3, r3
 80058b4:	f042 0202 	orrlt.w	r2, r2, #2
 80058b8:	9307      	strge	r3, [sp, #28]
 80058ba:	9307      	strlt	r3, [sp, #28]
 80058bc:	bfb8      	it	lt
 80058be:	9204      	strlt	r2, [sp, #16]
 80058c0:	7823      	ldrb	r3, [r4, #0]
 80058c2:	2b2e      	cmp	r3, #46	; 0x2e
 80058c4:	d10c      	bne.n	80058e0 <_svfiprintf_r+0x130>
 80058c6:	7863      	ldrb	r3, [r4, #1]
 80058c8:	2b2a      	cmp	r3, #42	; 0x2a
 80058ca:	d135      	bne.n	8005938 <_svfiprintf_r+0x188>
 80058cc:	9b03      	ldr	r3, [sp, #12]
 80058ce:	1d1a      	adds	r2, r3, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	9203      	str	r2, [sp, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bfb8      	it	lt
 80058d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80058dc:	3402      	adds	r4, #2
 80058de:	9305      	str	r3, [sp, #20]
 80058e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059ac <_svfiprintf_r+0x1fc>
 80058e4:	7821      	ldrb	r1, [r4, #0]
 80058e6:	2203      	movs	r2, #3
 80058e8:	4650      	mov	r0, sl
 80058ea:	f7fa fc71 	bl	80001d0 <memchr>
 80058ee:	b140      	cbz	r0, 8005902 <_svfiprintf_r+0x152>
 80058f0:	2340      	movs	r3, #64	; 0x40
 80058f2:	eba0 000a 	sub.w	r0, r0, sl
 80058f6:	fa03 f000 	lsl.w	r0, r3, r0
 80058fa:	9b04      	ldr	r3, [sp, #16]
 80058fc:	4303      	orrs	r3, r0
 80058fe:	3401      	adds	r4, #1
 8005900:	9304      	str	r3, [sp, #16]
 8005902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005906:	4826      	ldr	r0, [pc, #152]	; (80059a0 <_svfiprintf_r+0x1f0>)
 8005908:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800590c:	2206      	movs	r2, #6
 800590e:	f7fa fc5f 	bl	80001d0 <memchr>
 8005912:	2800      	cmp	r0, #0
 8005914:	d038      	beq.n	8005988 <_svfiprintf_r+0x1d8>
 8005916:	4b23      	ldr	r3, [pc, #140]	; (80059a4 <_svfiprintf_r+0x1f4>)
 8005918:	bb1b      	cbnz	r3, 8005962 <_svfiprintf_r+0x1b2>
 800591a:	9b03      	ldr	r3, [sp, #12]
 800591c:	3307      	adds	r3, #7
 800591e:	f023 0307 	bic.w	r3, r3, #7
 8005922:	3308      	adds	r3, #8
 8005924:	9303      	str	r3, [sp, #12]
 8005926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005928:	4433      	add	r3, r6
 800592a:	9309      	str	r3, [sp, #36]	; 0x24
 800592c:	e767      	b.n	80057fe <_svfiprintf_r+0x4e>
 800592e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005932:	460c      	mov	r4, r1
 8005934:	2001      	movs	r0, #1
 8005936:	e7a5      	b.n	8005884 <_svfiprintf_r+0xd4>
 8005938:	2300      	movs	r3, #0
 800593a:	3401      	adds	r4, #1
 800593c:	9305      	str	r3, [sp, #20]
 800593e:	4619      	mov	r1, r3
 8005940:	f04f 0c0a 	mov.w	ip, #10
 8005944:	4620      	mov	r0, r4
 8005946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800594a:	3a30      	subs	r2, #48	; 0x30
 800594c:	2a09      	cmp	r2, #9
 800594e:	d903      	bls.n	8005958 <_svfiprintf_r+0x1a8>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0c5      	beq.n	80058e0 <_svfiprintf_r+0x130>
 8005954:	9105      	str	r1, [sp, #20]
 8005956:	e7c3      	b.n	80058e0 <_svfiprintf_r+0x130>
 8005958:	fb0c 2101 	mla	r1, ip, r1, r2
 800595c:	4604      	mov	r4, r0
 800595e:	2301      	movs	r3, #1
 8005960:	e7f0      	b.n	8005944 <_svfiprintf_r+0x194>
 8005962:	ab03      	add	r3, sp, #12
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	462a      	mov	r2, r5
 8005968:	4b0f      	ldr	r3, [pc, #60]	; (80059a8 <_svfiprintf_r+0x1f8>)
 800596a:	a904      	add	r1, sp, #16
 800596c:	4638      	mov	r0, r7
 800596e:	f3af 8000 	nop.w
 8005972:	1c42      	adds	r2, r0, #1
 8005974:	4606      	mov	r6, r0
 8005976:	d1d6      	bne.n	8005926 <_svfiprintf_r+0x176>
 8005978:	89ab      	ldrh	r3, [r5, #12]
 800597a:	065b      	lsls	r3, r3, #25
 800597c:	f53f af2c 	bmi.w	80057d8 <_svfiprintf_r+0x28>
 8005980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005982:	b01d      	add	sp, #116	; 0x74
 8005984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005988:	ab03      	add	r3, sp, #12
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	462a      	mov	r2, r5
 800598e:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <_svfiprintf_r+0x1f8>)
 8005990:	a904      	add	r1, sp, #16
 8005992:	4638      	mov	r0, r7
 8005994:	f000 f87a 	bl	8005a8c <_printf_i>
 8005998:	e7eb      	b.n	8005972 <_svfiprintf_r+0x1c2>
 800599a:	bf00      	nop
 800599c:	08006064 	.word	0x08006064
 80059a0:	0800606e 	.word	0x0800606e
 80059a4:	00000000 	.word	0x00000000
 80059a8:	080056f9 	.word	0x080056f9
 80059ac:	0800606a 	.word	0x0800606a

080059b0 <_printf_common>:
 80059b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b4:	4616      	mov	r6, r2
 80059b6:	4699      	mov	r9, r3
 80059b8:	688a      	ldr	r2, [r1, #8]
 80059ba:	690b      	ldr	r3, [r1, #16]
 80059bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059c0:	4293      	cmp	r3, r2
 80059c2:	bfb8      	it	lt
 80059c4:	4613      	movlt	r3, r2
 80059c6:	6033      	str	r3, [r6, #0]
 80059c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059cc:	4607      	mov	r7, r0
 80059ce:	460c      	mov	r4, r1
 80059d0:	b10a      	cbz	r2, 80059d6 <_printf_common+0x26>
 80059d2:	3301      	adds	r3, #1
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	0699      	lsls	r1, r3, #26
 80059da:	bf42      	ittt	mi
 80059dc:	6833      	ldrmi	r3, [r6, #0]
 80059de:	3302      	addmi	r3, #2
 80059e0:	6033      	strmi	r3, [r6, #0]
 80059e2:	6825      	ldr	r5, [r4, #0]
 80059e4:	f015 0506 	ands.w	r5, r5, #6
 80059e8:	d106      	bne.n	80059f8 <_printf_common+0x48>
 80059ea:	f104 0a19 	add.w	sl, r4, #25
 80059ee:	68e3      	ldr	r3, [r4, #12]
 80059f0:	6832      	ldr	r2, [r6, #0]
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	42ab      	cmp	r3, r5
 80059f6:	dc26      	bgt.n	8005a46 <_printf_common+0x96>
 80059f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059fc:	1e13      	subs	r3, r2, #0
 80059fe:	6822      	ldr	r2, [r4, #0]
 8005a00:	bf18      	it	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	0692      	lsls	r2, r2, #26
 8005a06:	d42b      	bmi.n	8005a60 <_printf_common+0xb0>
 8005a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	4638      	mov	r0, r7
 8005a10:	47c0      	blx	r8
 8005a12:	3001      	adds	r0, #1
 8005a14:	d01e      	beq.n	8005a54 <_printf_common+0xa4>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	68e5      	ldr	r5, [r4, #12]
 8005a1a:	6832      	ldr	r2, [r6, #0]
 8005a1c:	f003 0306 	and.w	r3, r3, #6
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	bf08      	it	eq
 8005a24:	1aad      	subeq	r5, r5, r2
 8005a26:	68a3      	ldr	r3, [r4, #8]
 8005a28:	6922      	ldr	r2, [r4, #16]
 8005a2a:	bf0c      	ite	eq
 8005a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a30:	2500      	movne	r5, #0
 8005a32:	4293      	cmp	r3, r2
 8005a34:	bfc4      	itt	gt
 8005a36:	1a9b      	subgt	r3, r3, r2
 8005a38:	18ed      	addgt	r5, r5, r3
 8005a3a:	2600      	movs	r6, #0
 8005a3c:	341a      	adds	r4, #26
 8005a3e:	42b5      	cmp	r5, r6
 8005a40:	d11a      	bne.n	8005a78 <_printf_common+0xc8>
 8005a42:	2000      	movs	r0, #0
 8005a44:	e008      	b.n	8005a58 <_printf_common+0xa8>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4652      	mov	r2, sl
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	47c0      	blx	r8
 8005a50:	3001      	adds	r0, #1
 8005a52:	d103      	bne.n	8005a5c <_printf_common+0xac>
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	e7c6      	b.n	80059ee <_printf_common+0x3e>
 8005a60:	18e1      	adds	r1, r4, r3
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	2030      	movs	r0, #48	; 0x30
 8005a66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a6a:	4422      	add	r2, r4
 8005a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a74:	3302      	adds	r3, #2
 8005a76:	e7c7      	b.n	8005a08 <_printf_common+0x58>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	4638      	mov	r0, r7
 8005a80:	47c0      	blx	r8
 8005a82:	3001      	adds	r0, #1
 8005a84:	d0e6      	beq.n	8005a54 <_printf_common+0xa4>
 8005a86:	3601      	adds	r6, #1
 8005a88:	e7d9      	b.n	8005a3e <_printf_common+0x8e>
	...

08005a8c <_printf_i>:
 8005a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	7e0f      	ldrb	r7, [r1, #24]
 8005a92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a94:	2f78      	cmp	r7, #120	; 0x78
 8005a96:	4691      	mov	r9, r2
 8005a98:	4680      	mov	r8, r0
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	469a      	mov	sl, r3
 8005a9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005aa2:	d807      	bhi.n	8005ab4 <_printf_i+0x28>
 8005aa4:	2f62      	cmp	r7, #98	; 0x62
 8005aa6:	d80a      	bhi.n	8005abe <_printf_i+0x32>
 8005aa8:	2f00      	cmp	r7, #0
 8005aaa:	f000 80d8 	beq.w	8005c5e <_printf_i+0x1d2>
 8005aae:	2f58      	cmp	r7, #88	; 0x58
 8005ab0:	f000 80a3 	beq.w	8005bfa <_printf_i+0x16e>
 8005ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005abc:	e03a      	b.n	8005b34 <_printf_i+0xa8>
 8005abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ac2:	2b15      	cmp	r3, #21
 8005ac4:	d8f6      	bhi.n	8005ab4 <_printf_i+0x28>
 8005ac6:	a101      	add	r1, pc, #4	; (adr r1, 8005acc <_printf_i+0x40>)
 8005ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005acc:	08005b25 	.word	0x08005b25
 8005ad0:	08005b39 	.word	0x08005b39
 8005ad4:	08005ab5 	.word	0x08005ab5
 8005ad8:	08005ab5 	.word	0x08005ab5
 8005adc:	08005ab5 	.word	0x08005ab5
 8005ae0:	08005ab5 	.word	0x08005ab5
 8005ae4:	08005b39 	.word	0x08005b39
 8005ae8:	08005ab5 	.word	0x08005ab5
 8005aec:	08005ab5 	.word	0x08005ab5
 8005af0:	08005ab5 	.word	0x08005ab5
 8005af4:	08005ab5 	.word	0x08005ab5
 8005af8:	08005c45 	.word	0x08005c45
 8005afc:	08005b69 	.word	0x08005b69
 8005b00:	08005c27 	.word	0x08005c27
 8005b04:	08005ab5 	.word	0x08005ab5
 8005b08:	08005ab5 	.word	0x08005ab5
 8005b0c:	08005c67 	.word	0x08005c67
 8005b10:	08005ab5 	.word	0x08005ab5
 8005b14:	08005b69 	.word	0x08005b69
 8005b18:	08005ab5 	.word	0x08005ab5
 8005b1c:	08005ab5 	.word	0x08005ab5
 8005b20:	08005c2f 	.word	0x08005c2f
 8005b24:	682b      	ldr	r3, [r5, #0]
 8005b26:	1d1a      	adds	r2, r3, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	602a      	str	r2, [r5, #0]
 8005b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b34:	2301      	movs	r3, #1
 8005b36:	e0a3      	b.n	8005c80 <_printf_i+0x1f4>
 8005b38:	6820      	ldr	r0, [r4, #0]
 8005b3a:	6829      	ldr	r1, [r5, #0]
 8005b3c:	0606      	lsls	r6, r0, #24
 8005b3e:	f101 0304 	add.w	r3, r1, #4
 8005b42:	d50a      	bpl.n	8005b5a <_printf_i+0xce>
 8005b44:	680e      	ldr	r6, [r1, #0]
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	2e00      	cmp	r6, #0
 8005b4a:	da03      	bge.n	8005b54 <_printf_i+0xc8>
 8005b4c:	232d      	movs	r3, #45	; 0x2d
 8005b4e:	4276      	negs	r6, r6
 8005b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b54:	485e      	ldr	r0, [pc, #376]	; (8005cd0 <_printf_i+0x244>)
 8005b56:	230a      	movs	r3, #10
 8005b58:	e019      	b.n	8005b8e <_printf_i+0x102>
 8005b5a:	680e      	ldr	r6, [r1, #0]
 8005b5c:	602b      	str	r3, [r5, #0]
 8005b5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b62:	bf18      	it	ne
 8005b64:	b236      	sxthne	r6, r6
 8005b66:	e7ef      	b.n	8005b48 <_printf_i+0xbc>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	6820      	ldr	r0, [r4, #0]
 8005b6c:	1d19      	adds	r1, r3, #4
 8005b6e:	6029      	str	r1, [r5, #0]
 8005b70:	0601      	lsls	r1, r0, #24
 8005b72:	d501      	bpl.n	8005b78 <_printf_i+0xec>
 8005b74:	681e      	ldr	r6, [r3, #0]
 8005b76:	e002      	b.n	8005b7e <_printf_i+0xf2>
 8005b78:	0646      	lsls	r6, r0, #25
 8005b7a:	d5fb      	bpl.n	8005b74 <_printf_i+0xe8>
 8005b7c:	881e      	ldrh	r6, [r3, #0]
 8005b7e:	4854      	ldr	r0, [pc, #336]	; (8005cd0 <_printf_i+0x244>)
 8005b80:	2f6f      	cmp	r7, #111	; 0x6f
 8005b82:	bf0c      	ite	eq
 8005b84:	2308      	moveq	r3, #8
 8005b86:	230a      	movne	r3, #10
 8005b88:	2100      	movs	r1, #0
 8005b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b8e:	6865      	ldr	r5, [r4, #4]
 8005b90:	60a5      	str	r5, [r4, #8]
 8005b92:	2d00      	cmp	r5, #0
 8005b94:	bfa2      	ittt	ge
 8005b96:	6821      	ldrge	r1, [r4, #0]
 8005b98:	f021 0104 	bicge.w	r1, r1, #4
 8005b9c:	6021      	strge	r1, [r4, #0]
 8005b9e:	b90e      	cbnz	r6, 8005ba4 <_printf_i+0x118>
 8005ba0:	2d00      	cmp	r5, #0
 8005ba2:	d04d      	beq.n	8005c40 <_printf_i+0x1b4>
 8005ba4:	4615      	mov	r5, r2
 8005ba6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005baa:	fb03 6711 	mls	r7, r3, r1, r6
 8005bae:	5dc7      	ldrb	r7, [r0, r7]
 8005bb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bb4:	4637      	mov	r7, r6
 8005bb6:	42bb      	cmp	r3, r7
 8005bb8:	460e      	mov	r6, r1
 8005bba:	d9f4      	bls.n	8005ba6 <_printf_i+0x11a>
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d10b      	bne.n	8005bd8 <_printf_i+0x14c>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	07de      	lsls	r6, r3, #31
 8005bc4:	d508      	bpl.n	8005bd8 <_printf_i+0x14c>
 8005bc6:	6923      	ldr	r3, [r4, #16]
 8005bc8:	6861      	ldr	r1, [r4, #4]
 8005bca:	4299      	cmp	r1, r3
 8005bcc:	bfde      	ittt	le
 8005bce:	2330      	movle	r3, #48	; 0x30
 8005bd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bd8:	1b52      	subs	r2, r2, r5
 8005bda:	6122      	str	r2, [r4, #16]
 8005bdc:	f8cd a000 	str.w	sl, [sp]
 8005be0:	464b      	mov	r3, r9
 8005be2:	aa03      	add	r2, sp, #12
 8005be4:	4621      	mov	r1, r4
 8005be6:	4640      	mov	r0, r8
 8005be8:	f7ff fee2 	bl	80059b0 <_printf_common>
 8005bec:	3001      	adds	r0, #1
 8005bee:	d14c      	bne.n	8005c8a <_printf_i+0x1fe>
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf4:	b004      	add	sp, #16
 8005bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfa:	4835      	ldr	r0, [pc, #212]	; (8005cd0 <_printf_i+0x244>)
 8005bfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c00:	6829      	ldr	r1, [r5, #0]
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c08:	6029      	str	r1, [r5, #0]
 8005c0a:	061d      	lsls	r5, r3, #24
 8005c0c:	d514      	bpl.n	8005c38 <_printf_i+0x1ac>
 8005c0e:	07df      	lsls	r7, r3, #31
 8005c10:	bf44      	itt	mi
 8005c12:	f043 0320 	orrmi.w	r3, r3, #32
 8005c16:	6023      	strmi	r3, [r4, #0]
 8005c18:	b91e      	cbnz	r6, 8005c22 <_printf_i+0x196>
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	f023 0320 	bic.w	r3, r3, #32
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	2310      	movs	r3, #16
 8005c24:	e7b0      	b.n	8005b88 <_printf_i+0xfc>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	f043 0320 	orr.w	r3, r3, #32
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	2378      	movs	r3, #120	; 0x78
 8005c30:	4828      	ldr	r0, [pc, #160]	; (8005cd4 <_printf_i+0x248>)
 8005c32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c36:	e7e3      	b.n	8005c00 <_printf_i+0x174>
 8005c38:	0659      	lsls	r1, r3, #25
 8005c3a:	bf48      	it	mi
 8005c3c:	b2b6      	uxthmi	r6, r6
 8005c3e:	e7e6      	b.n	8005c0e <_printf_i+0x182>
 8005c40:	4615      	mov	r5, r2
 8005c42:	e7bb      	b.n	8005bbc <_printf_i+0x130>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	6826      	ldr	r6, [r4, #0]
 8005c48:	6961      	ldr	r1, [r4, #20]
 8005c4a:	1d18      	adds	r0, r3, #4
 8005c4c:	6028      	str	r0, [r5, #0]
 8005c4e:	0635      	lsls	r5, r6, #24
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	d501      	bpl.n	8005c58 <_printf_i+0x1cc>
 8005c54:	6019      	str	r1, [r3, #0]
 8005c56:	e002      	b.n	8005c5e <_printf_i+0x1d2>
 8005c58:	0670      	lsls	r0, r6, #25
 8005c5a:	d5fb      	bpl.n	8005c54 <_printf_i+0x1c8>
 8005c5c:	8019      	strh	r1, [r3, #0]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6123      	str	r3, [r4, #16]
 8005c62:	4615      	mov	r5, r2
 8005c64:	e7ba      	b.n	8005bdc <_printf_i+0x150>
 8005c66:	682b      	ldr	r3, [r5, #0]
 8005c68:	1d1a      	adds	r2, r3, #4
 8005c6a:	602a      	str	r2, [r5, #0]
 8005c6c:	681d      	ldr	r5, [r3, #0]
 8005c6e:	6862      	ldr	r2, [r4, #4]
 8005c70:	2100      	movs	r1, #0
 8005c72:	4628      	mov	r0, r5
 8005c74:	f7fa faac 	bl	80001d0 <memchr>
 8005c78:	b108      	cbz	r0, 8005c7e <_printf_i+0x1f2>
 8005c7a:	1b40      	subs	r0, r0, r5
 8005c7c:	6060      	str	r0, [r4, #4]
 8005c7e:	6863      	ldr	r3, [r4, #4]
 8005c80:	6123      	str	r3, [r4, #16]
 8005c82:	2300      	movs	r3, #0
 8005c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c88:	e7a8      	b.n	8005bdc <_printf_i+0x150>
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	462a      	mov	r2, r5
 8005c8e:	4649      	mov	r1, r9
 8005c90:	4640      	mov	r0, r8
 8005c92:	47d0      	blx	sl
 8005c94:	3001      	adds	r0, #1
 8005c96:	d0ab      	beq.n	8005bf0 <_printf_i+0x164>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	079b      	lsls	r3, r3, #30
 8005c9c:	d413      	bmi.n	8005cc6 <_printf_i+0x23a>
 8005c9e:	68e0      	ldr	r0, [r4, #12]
 8005ca0:	9b03      	ldr	r3, [sp, #12]
 8005ca2:	4298      	cmp	r0, r3
 8005ca4:	bfb8      	it	lt
 8005ca6:	4618      	movlt	r0, r3
 8005ca8:	e7a4      	b.n	8005bf4 <_printf_i+0x168>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4632      	mov	r2, r6
 8005cae:	4649      	mov	r1, r9
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	47d0      	blx	sl
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d09b      	beq.n	8005bf0 <_printf_i+0x164>
 8005cb8:	3501      	adds	r5, #1
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	9903      	ldr	r1, [sp, #12]
 8005cbe:	1a5b      	subs	r3, r3, r1
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dcf2      	bgt.n	8005caa <_printf_i+0x21e>
 8005cc4:	e7eb      	b.n	8005c9e <_printf_i+0x212>
 8005cc6:	2500      	movs	r5, #0
 8005cc8:	f104 0619 	add.w	r6, r4, #25
 8005ccc:	e7f5      	b.n	8005cba <_printf_i+0x22e>
 8005cce:	bf00      	nop
 8005cd0:	08006075 	.word	0x08006075
 8005cd4:	08006086 	.word	0x08006086

08005cd8 <memcpy>:
 8005cd8:	440a      	add	r2, r1
 8005cda:	4291      	cmp	r1, r2
 8005cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ce0:	d100      	bne.n	8005ce4 <memcpy+0xc>
 8005ce2:	4770      	bx	lr
 8005ce4:	b510      	push	{r4, lr}
 8005ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cee:	4291      	cmp	r1, r2
 8005cf0:	d1f9      	bne.n	8005ce6 <memcpy+0xe>
 8005cf2:	bd10      	pop	{r4, pc}

08005cf4 <memmove>:
 8005cf4:	4288      	cmp	r0, r1
 8005cf6:	b510      	push	{r4, lr}
 8005cf8:	eb01 0402 	add.w	r4, r1, r2
 8005cfc:	d902      	bls.n	8005d04 <memmove+0x10>
 8005cfe:	4284      	cmp	r4, r0
 8005d00:	4623      	mov	r3, r4
 8005d02:	d807      	bhi.n	8005d14 <memmove+0x20>
 8005d04:	1e43      	subs	r3, r0, #1
 8005d06:	42a1      	cmp	r1, r4
 8005d08:	d008      	beq.n	8005d1c <memmove+0x28>
 8005d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d12:	e7f8      	b.n	8005d06 <memmove+0x12>
 8005d14:	4402      	add	r2, r0
 8005d16:	4601      	mov	r1, r0
 8005d18:	428a      	cmp	r2, r1
 8005d1a:	d100      	bne.n	8005d1e <memmove+0x2a>
 8005d1c:	bd10      	pop	{r4, pc}
 8005d1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d26:	e7f7      	b.n	8005d18 <memmove+0x24>

08005d28 <_free_r>:
 8005d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d2a:	2900      	cmp	r1, #0
 8005d2c:	d044      	beq.n	8005db8 <_free_r+0x90>
 8005d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d32:	9001      	str	r0, [sp, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f1a1 0404 	sub.w	r4, r1, #4
 8005d3a:	bfb8      	it	lt
 8005d3c:	18e4      	addlt	r4, r4, r3
 8005d3e:	f000 f913 	bl	8005f68 <__malloc_lock>
 8005d42:	4a1e      	ldr	r2, [pc, #120]	; (8005dbc <_free_r+0x94>)
 8005d44:	9801      	ldr	r0, [sp, #4]
 8005d46:	6813      	ldr	r3, [r2, #0]
 8005d48:	b933      	cbnz	r3, 8005d58 <_free_r+0x30>
 8005d4a:	6063      	str	r3, [r4, #4]
 8005d4c:	6014      	str	r4, [r2, #0]
 8005d4e:	b003      	add	sp, #12
 8005d50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d54:	f000 b90e 	b.w	8005f74 <__malloc_unlock>
 8005d58:	42a3      	cmp	r3, r4
 8005d5a:	d908      	bls.n	8005d6e <_free_r+0x46>
 8005d5c:	6825      	ldr	r5, [r4, #0]
 8005d5e:	1961      	adds	r1, r4, r5
 8005d60:	428b      	cmp	r3, r1
 8005d62:	bf01      	itttt	eq
 8005d64:	6819      	ldreq	r1, [r3, #0]
 8005d66:	685b      	ldreq	r3, [r3, #4]
 8005d68:	1949      	addeq	r1, r1, r5
 8005d6a:	6021      	streq	r1, [r4, #0]
 8005d6c:	e7ed      	b.n	8005d4a <_free_r+0x22>
 8005d6e:	461a      	mov	r2, r3
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	b10b      	cbz	r3, 8005d78 <_free_r+0x50>
 8005d74:	42a3      	cmp	r3, r4
 8005d76:	d9fa      	bls.n	8005d6e <_free_r+0x46>
 8005d78:	6811      	ldr	r1, [r2, #0]
 8005d7a:	1855      	adds	r5, r2, r1
 8005d7c:	42a5      	cmp	r5, r4
 8005d7e:	d10b      	bne.n	8005d98 <_free_r+0x70>
 8005d80:	6824      	ldr	r4, [r4, #0]
 8005d82:	4421      	add	r1, r4
 8005d84:	1854      	adds	r4, r2, r1
 8005d86:	42a3      	cmp	r3, r4
 8005d88:	6011      	str	r1, [r2, #0]
 8005d8a:	d1e0      	bne.n	8005d4e <_free_r+0x26>
 8005d8c:	681c      	ldr	r4, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	6053      	str	r3, [r2, #4]
 8005d92:	4421      	add	r1, r4
 8005d94:	6011      	str	r1, [r2, #0]
 8005d96:	e7da      	b.n	8005d4e <_free_r+0x26>
 8005d98:	d902      	bls.n	8005da0 <_free_r+0x78>
 8005d9a:	230c      	movs	r3, #12
 8005d9c:	6003      	str	r3, [r0, #0]
 8005d9e:	e7d6      	b.n	8005d4e <_free_r+0x26>
 8005da0:	6825      	ldr	r5, [r4, #0]
 8005da2:	1961      	adds	r1, r4, r5
 8005da4:	428b      	cmp	r3, r1
 8005da6:	bf04      	itt	eq
 8005da8:	6819      	ldreq	r1, [r3, #0]
 8005daa:	685b      	ldreq	r3, [r3, #4]
 8005dac:	6063      	str	r3, [r4, #4]
 8005dae:	bf04      	itt	eq
 8005db0:	1949      	addeq	r1, r1, r5
 8005db2:	6021      	streq	r1, [r4, #0]
 8005db4:	6054      	str	r4, [r2, #4]
 8005db6:	e7ca      	b.n	8005d4e <_free_r+0x26>
 8005db8:	b003      	add	sp, #12
 8005dba:	bd30      	pop	{r4, r5, pc}
 8005dbc:	20000724 	.word	0x20000724

08005dc0 <sbrk_aligned>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	4e0e      	ldr	r6, [pc, #56]	; (8005dfc <sbrk_aligned+0x3c>)
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	6831      	ldr	r1, [r6, #0]
 8005dc8:	4605      	mov	r5, r0
 8005dca:	b911      	cbnz	r1, 8005dd2 <sbrk_aligned+0x12>
 8005dcc:	f000 f8bc 	bl	8005f48 <_sbrk_r>
 8005dd0:	6030      	str	r0, [r6, #0]
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	f000 f8b7 	bl	8005f48 <_sbrk_r>
 8005dda:	1c43      	adds	r3, r0, #1
 8005ddc:	d00a      	beq.n	8005df4 <sbrk_aligned+0x34>
 8005dde:	1cc4      	adds	r4, r0, #3
 8005de0:	f024 0403 	bic.w	r4, r4, #3
 8005de4:	42a0      	cmp	r0, r4
 8005de6:	d007      	beq.n	8005df8 <sbrk_aligned+0x38>
 8005de8:	1a21      	subs	r1, r4, r0
 8005dea:	4628      	mov	r0, r5
 8005dec:	f000 f8ac 	bl	8005f48 <_sbrk_r>
 8005df0:	3001      	adds	r0, #1
 8005df2:	d101      	bne.n	8005df8 <sbrk_aligned+0x38>
 8005df4:	f04f 34ff 	mov.w	r4, #4294967295
 8005df8:	4620      	mov	r0, r4
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	20000728 	.word	0x20000728

08005e00 <_malloc_r>:
 8005e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e04:	1ccd      	adds	r5, r1, #3
 8005e06:	f025 0503 	bic.w	r5, r5, #3
 8005e0a:	3508      	adds	r5, #8
 8005e0c:	2d0c      	cmp	r5, #12
 8005e0e:	bf38      	it	cc
 8005e10:	250c      	movcc	r5, #12
 8005e12:	2d00      	cmp	r5, #0
 8005e14:	4607      	mov	r7, r0
 8005e16:	db01      	blt.n	8005e1c <_malloc_r+0x1c>
 8005e18:	42a9      	cmp	r1, r5
 8005e1a:	d905      	bls.n	8005e28 <_malloc_r+0x28>
 8005e1c:	230c      	movs	r3, #12
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	2600      	movs	r6, #0
 8005e22:	4630      	mov	r0, r6
 8005e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e28:	4e2e      	ldr	r6, [pc, #184]	; (8005ee4 <_malloc_r+0xe4>)
 8005e2a:	f000 f89d 	bl	8005f68 <__malloc_lock>
 8005e2e:	6833      	ldr	r3, [r6, #0]
 8005e30:	461c      	mov	r4, r3
 8005e32:	bb34      	cbnz	r4, 8005e82 <_malloc_r+0x82>
 8005e34:	4629      	mov	r1, r5
 8005e36:	4638      	mov	r0, r7
 8005e38:	f7ff ffc2 	bl	8005dc0 <sbrk_aligned>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	4604      	mov	r4, r0
 8005e40:	d14d      	bne.n	8005ede <_malloc_r+0xde>
 8005e42:	6834      	ldr	r4, [r6, #0]
 8005e44:	4626      	mov	r6, r4
 8005e46:	2e00      	cmp	r6, #0
 8005e48:	d140      	bne.n	8005ecc <_malloc_r+0xcc>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	4638      	mov	r0, r7
 8005e50:	eb04 0803 	add.w	r8, r4, r3
 8005e54:	f000 f878 	bl	8005f48 <_sbrk_r>
 8005e58:	4580      	cmp	r8, r0
 8005e5a:	d13a      	bne.n	8005ed2 <_malloc_r+0xd2>
 8005e5c:	6821      	ldr	r1, [r4, #0]
 8005e5e:	3503      	adds	r5, #3
 8005e60:	1a6d      	subs	r5, r5, r1
 8005e62:	f025 0503 	bic.w	r5, r5, #3
 8005e66:	3508      	adds	r5, #8
 8005e68:	2d0c      	cmp	r5, #12
 8005e6a:	bf38      	it	cc
 8005e6c:	250c      	movcc	r5, #12
 8005e6e:	4629      	mov	r1, r5
 8005e70:	4638      	mov	r0, r7
 8005e72:	f7ff ffa5 	bl	8005dc0 <sbrk_aligned>
 8005e76:	3001      	adds	r0, #1
 8005e78:	d02b      	beq.n	8005ed2 <_malloc_r+0xd2>
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	442b      	add	r3, r5
 8005e7e:	6023      	str	r3, [r4, #0]
 8005e80:	e00e      	b.n	8005ea0 <_malloc_r+0xa0>
 8005e82:	6822      	ldr	r2, [r4, #0]
 8005e84:	1b52      	subs	r2, r2, r5
 8005e86:	d41e      	bmi.n	8005ec6 <_malloc_r+0xc6>
 8005e88:	2a0b      	cmp	r2, #11
 8005e8a:	d916      	bls.n	8005eba <_malloc_r+0xba>
 8005e8c:	1961      	adds	r1, r4, r5
 8005e8e:	42a3      	cmp	r3, r4
 8005e90:	6025      	str	r5, [r4, #0]
 8005e92:	bf18      	it	ne
 8005e94:	6059      	strne	r1, [r3, #4]
 8005e96:	6863      	ldr	r3, [r4, #4]
 8005e98:	bf08      	it	eq
 8005e9a:	6031      	streq	r1, [r6, #0]
 8005e9c:	5162      	str	r2, [r4, r5]
 8005e9e:	604b      	str	r3, [r1, #4]
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	f104 060b 	add.w	r6, r4, #11
 8005ea6:	f000 f865 	bl	8005f74 <__malloc_unlock>
 8005eaa:	f026 0607 	bic.w	r6, r6, #7
 8005eae:	1d23      	adds	r3, r4, #4
 8005eb0:	1af2      	subs	r2, r6, r3
 8005eb2:	d0b6      	beq.n	8005e22 <_malloc_r+0x22>
 8005eb4:	1b9b      	subs	r3, r3, r6
 8005eb6:	50a3      	str	r3, [r4, r2]
 8005eb8:	e7b3      	b.n	8005e22 <_malloc_r+0x22>
 8005eba:	6862      	ldr	r2, [r4, #4]
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	bf0c      	ite	eq
 8005ec0:	6032      	streq	r2, [r6, #0]
 8005ec2:	605a      	strne	r2, [r3, #4]
 8005ec4:	e7ec      	b.n	8005ea0 <_malloc_r+0xa0>
 8005ec6:	4623      	mov	r3, r4
 8005ec8:	6864      	ldr	r4, [r4, #4]
 8005eca:	e7b2      	b.n	8005e32 <_malloc_r+0x32>
 8005ecc:	4634      	mov	r4, r6
 8005ece:	6876      	ldr	r6, [r6, #4]
 8005ed0:	e7b9      	b.n	8005e46 <_malloc_r+0x46>
 8005ed2:	230c      	movs	r3, #12
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	f000 f84c 	bl	8005f74 <__malloc_unlock>
 8005edc:	e7a1      	b.n	8005e22 <_malloc_r+0x22>
 8005ede:	6025      	str	r5, [r4, #0]
 8005ee0:	e7de      	b.n	8005ea0 <_malloc_r+0xa0>
 8005ee2:	bf00      	nop
 8005ee4:	20000724 	.word	0x20000724

08005ee8 <_realloc_r>:
 8005ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eec:	4680      	mov	r8, r0
 8005eee:	4614      	mov	r4, r2
 8005ef0:	460e      	mov	r6, r1
 8005ef2:	b921      	cbnz	r1, 8005efe <_realloc_r+0x16>
 8005ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef8:	4611      	mov	r1, r2
 8005efa:	f7ff bf81 	b.w	8005e00 <_malloc_r>
 8005efe:	b92a      	cbnz	r2, 8005f0c <_realloc_r+0x24>
 8005f00:	f7ff ff12 	bl	8005d28 <_free_r>
 8005f04:	4625      	mov	r5, r4
 8005f06:	4628      	mov	r0, r5
 8005f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f0c:	f000 f838 	bl	8005f80 <_malloc_usable_size_r>
 8005f10:	4284      	cmp	r4, r0
 8005f12:	4607      	mov	r7, r0
 8005f14:	d802      	bhi.n	8005f1c <_realloc_r+0x34>
 8005f16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f1a:	d812      	bhi.n	8005f42 <_realloc_r+0x5a>
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	4640      	mov	r0, r8
 8005f20:	f7ff ff6e 	bl	8005e00 <_malloc_r>
 8005f24:	4605      	mov	r5, r0
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d0ed      	beq.n	8005f06 <_realloc_r+0x1e>
 8005f2a:	42bc      	cmp	r4, r7
 8005f2c:	4622      	mov	r2, r4
 8005f2e:	4631      	mov	r1, r6
 8005f30:	bf28      	it	cs
 8005f32:	463a      	movcs	r2, r7
 8005f34:	f7ff fed0 	bl	8005cd8 <memcpy>
 8005f38:	4631      	mov	r1, r6
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	f7ff fef4 	bl	8005d28 <_free_r>
 8005f40:	e7e1      	b.n	8005f06 <_realloc_r+0x1e>
 8005f42:	4635      	mov	r5, r6
 8005f44:	e7df      	b.n	8005f06 <_realloc_r+0x1e>
	...

08005f48 <_sbrk_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4d06      	ldr	r5, [pc, #24]	; (8005f64 <_sbrk_r+0x1c>)
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4608      	mov	r0, r1
 8005f52:	602b      	str	r3, [r5, #0]
 8005f54:	f7fb f822 	bl	8000f9c <_sbrk>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d102      	bne.n	8005f62 <_sbrk_r+0x1a>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	b103      	cbz	r3, 8005f62 <_sbrk_r+0x1a>
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	2000072c 	.word	0x2000072c

08005f68 <__malloc_lock>:
 8005f68:	4801      	ldr	r0, [pc, #4]	; (8005f70 <__malloc_lock+0x8>)
 8005f6a:	f000 b811 	b.w	8005f90 <__retarget_lock_acquire_recursive>
 8005f6e:	bf00      	nop
 8005f70:	20000730 	.word	0x20000730

08005f74 <__malloc_unlock>:
 8005f74:	4801      	ldr	r0, [pc, #4]	; (8005f7c <__malloc_unlock+0x8>)
 8005f76:	f000 b80c 	b.w	8005f92 <__retarget_lock_release_recursive>
 8005f7a:	bf00      	nop
 8005f7c:	20000730 	.word	0x20000730

08005f80 <_malloc_usable_size_r>:
 8005f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f84:	1f18      	subs	r0, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bfbc      	itt	lt
 8005f8a:	580b      	ldrlt	r3, [r1, r0]
 8005f8c:	18c0      	addlt	r0, r0, r3
 8005f8e:	4770      	bx	lr

08005f90 <__retarget_lock_acquire_recursive>:
 8005f90:	4770      	bx	lr

08005f92 <__retarget_lock_release_recursive>:
 8005f92:	4770      	bx	lr

08005f94 <_init>:
 8005f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f96:	bf00      	nop
 8005f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9a:	bc08      	pop	{r3}
 8005f9c:	469e      	mov	lr, r3
 8005f9e:	4770      	bx	lr

08005fa0 <_fini>:
 8005fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa2:	bf00      	nop
 8005fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa6:	bc08      	pop	{r3}
 8005fa8:	469e      	mov	lr, r3
 8005faa:	4770      	bx	lr
